/* 
 * Transactional API
 *
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IVerifyApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Cancel Verify Request
        /// </summary>
        /// <remarks>
        /// This method will cancel the requested verify. No codes will be further generated or confirmed within the context of the id of the message
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>List&lt;VerifyIdResponse&gt;</returns>
        List<VerifyIdResponse> CancelVerify (string id);

        /// <summary>
        /// Cancel Verify Request
        /// </summary>
        /// <remarks>
        /// This method will cancel the requested verify. No codes will be further generated or confirmed within the context of the id of the message
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>ApiResponse of List&lt;VerifyIdResponse&gt;</returns>
        ApiResponse<List<VerifyIdResponse>> CancelVerifyWithHttpInfo (string id);
        /// <summary>
        /// Get Verify Request
        /// </summary>
        /// <remarks>
        /// This method gets a verify requests, including status of it
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>CheckVerifyResponse</returns>
        CheckVerifyResponse GetVerify (string id);

        /// <summary>
        /// Get Verify Request
        /// </summary>
        /// <remarks>
        /// This method gets a verify requests, including status of it
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>ApiResponse of CheckVerifyResponse</returns>
        ApiResponse<CheckVerifyResponse> GetVerifyWithHttpInfo (string id);
        /// <summary>
        /// Request Verify
        /// </summary>
        /// <remarks>
        /// This method will generate a code and send a message with it to a recipient
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>VerifyIdResponse</returns>
        VerifyIdResponse RequestVerify (VerifyRequest body = null);

        /// <summary>
        /// Request Verify
        /// </summary>
        /// <remarks>
        /// This method will generate a code and send a message with it to a recipient
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of VerifyIdResponse</returns>
        ApiResponse<VerifyIdResponse> RequestVerifyWithHttpInfo (VerifyRequest body = null);
        /// <summary>
        /// Resend Verify Code
        /// </summary>
        /// <remarks>
        /// This method will resend the requested verify. A new code will be generated and sent to the recipient
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>List&lt;VerifyIdResponse&gt;</returns>
        List<VerifyIdResponse> ResendVerify (string id);

        /// <summary>
        /// Resend Verify Code
        /// </summary>
        /// <remarks>
        /// This method will resend the requested verify. A new code will be generated and sent to the recipient
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>ApiResponse of List&lt;VerifyIdResponse&gt;</returns>
        ApiResponse<List<VerifyIdResponse>> ResendVerifyWithHttpInfo (string id);
        /// <summary>
        /// Validate Verify Code
        /// </summary>
        /// <remarks>
        /// This method validates the code submitted by the recipient. This request should be made by the sender of the Verify request
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;VerifyIdResponse&gt;</returns>
        List<VerifyIdResponse> ValidateVerifyCode (string id, ValidateCodeVerifyRequest body = null);

        /// <summary>
        /// Validate Verify Code
        /// </summary>
        /// <remarks>
        /// This method validates the code submitted by the recipient. This request should be made by the sender of the Verify request
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;VerifyIdResponse&gt;</returns>
        ApiResponse<List<VerifyIdResponse>> ValidateVerifyCodeWithHttpInfo (string id, ValidateCodeVerifyRequest body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Cancel Verify Request
        /// </summary>
        /// <remarks>
        /// This method will cancel the requested verify. No codes will be further generated or confirmed within the context of the id of the message
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>Task of List&lt;VerifyIdResponse&gt;</returns>
        System.Threading.Tasks.Task<List<VerifyIdResponse>> CancelVerifyAsync (string id);

        /// <summary>
        /// Cancel Verify Request
        /// </summary>
        /// <remarks>
        /// This method will cancel the requested verify. No codes will be further generated or confirmed within the context of the id of the message
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>Task of ApiResponse (List&lt;VerifyIdResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VerifyIdResponse>>> CancelVerifyAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get Verify Request
        /// </summary>
        /// <remarks>
        /// This method gets a verify requests, including status of it
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>Task of CheckVerifyResponse</returns>
        System.Threading.Tasks.Task<CheckVerifyResponse> GetVerifyAsync (string id);

        /// <summary>
        /// Get Verify Request
        /// </summary>
        /// <remarks>
        /// This method gets a verify requests, including status of it
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>Task of ApiResponse (CheckVerifyResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CheckVerifyResponse>> GetVerifyAsyncWithHttpInfo (string id);
        /// <summary>
        /// Request Verify
        /// </summary>
        /// <remarks>
        /// This method will generate a code and send a message with it to a recipient
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of VerifyIdResponse</returns>
        System.Threading.Tasks.Task<VerifyIdResponse> RequestVerifyAsync (VerifyRequest body = null);

        /// <summary>
        /// Request Verify
        /// </summary>
        /// <remarks>
        /// This method will generate a code and send a message with it to a recipient
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (VerifyIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<VerifyIdResponse>> RequestVerifyAsyncWithHttpInfo (VerifyRequest body = null);
        /// <summary>
        /// Resend Verify Code
        /// </summary>
        /// <remarks>
        /// This method will resend the requested verify. A new code will be generated and sent to the recipient
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>Task of List&lt;VerifyIdResponse&gt;</returns>
        System.Threading.Tasks.Task<List<VerifyIdResponse>> ResendVerifyAsync (string id);

        /// <summary>
        /// Resend Verify Code
        /// </summary>
        /// <remarks>
        /// This method will resend the requested verify. A new code will be generated and sent to the recipient
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>Task of ApiResponse (List&lt;VerifyIdResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VerifyIdResponse>>> ResendVerifyAsyncWithHttpInfo (string id);
        /// <summary>
        /// Validate Verify Code
        /// </summary>
        /// <remarks>
        /// This method validates the code submitted by the recipient. This request should be made by the sender of the Verify request
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;VerifyIdResponse&gt;</returns>
        System.Threading.Tasks.Task<List<VerifyIdResponse>> ValidateVerifyCodeAsync (string id, ValidateCodeVerifyRequest body = null);

        /// <summary>
        /// Validate Verify Code
        /// </summary>
        /// <remarks>
        /// This method validates the code submitted by the recipient. This request should be made by the sender of the Verify request
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;VerifyIdResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<VerifyIdResponse>>> ValidateVerifyCodeAsyncWithHttpInfo (string id, ValidateCodeVerifyRequest body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class VerifyApi : IVerifyApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VerifyApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyApi"/> class
        /// </summary>
        /// <returns></returns>
        public VerifyApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public VerifyApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Cancel Verify Request This method will cancel the requested verify. No codes will be further generated or confirmed within the context of the id of the message
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>List&lt;VerifyIdResponse&gt;</returns>
        public List<VerifyIdResponse> CancelVerify (string id)
        {
             ApiResponse<List<VerifyIdResponse>> localVarResponse = CancelVerifyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel Verify Request This method will cancel the requested verify. No codes will be further generated or confirmed within the context of the id of the message
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>ApiResponse of List&lt;VerifyIdResponse&gt;</returns>
        public ApiResponse< List<VerifyIdResponse> > CancelVerifyWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VerifyApi->CancelVerify");

            var localVarPath = "/v2/verify/{id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelVerify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VerifyIdResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<VerifyIdResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VerifyIdResponse>)));
        }

        /// <summary>
        /// Cancel Verify Request This method will cancel the requested verify. No codes will be further generated or confirmed within the context of the id of the message
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>Task of List&lt;VerifyIdResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<VerifyIdResponse>> CancelVerifyAsync (string id)
        {
             ApiResponse<List<VerifyIdResponse>> localVarResponse = await CancelVerifyAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel Verify Request This method will cancel the requested verify. No codes will be further generated or confirmed within the context of the id of the message
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>Task of ApiResponse (List&lt;VerifyIdResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VerifyIdResponse>>> CancelVerifyAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VerifyApi->CancelVerify");

            var localVarPath = "/v2/verify/{id}/cancel";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CancelVerify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VerifyIdResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<VerifyIdResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VerifyIdResponse>)));
        }

        /// <summary>
        /// Get Verify Request This method gets a verify requests, including status of it
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>CheckVerifyResponse</returns>
        public CheckVerifyResponse GetVerify (string id)
        {
             ApiResponse<CheckVerifyResponse> localVarResponse = GetVerifyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Verify Request This method gets a verify requests, including status of it
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>ApiResponse of CheckVerifyResponse</returns>
        public ApiResponse< CheckVerifyResponse > GetVerifyWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VerifyApi->GetVerify");

            var localVarPath = "/v2/verify/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVerify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckVerifyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CheckVerifyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckVerifyResponse)));
        }

        /// <summary>
        /// Get Verify Request This method gets a verify requests, including status of it
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>Task of CheckVerifyResponse</returns>
        public async System.Threading.Tasks.Task<CheckVerifyResponse> GetVerifyAsync (string id)
        {
             ApiResponse<CheckVerifyResponse> localVarResponse = await GetVerifyAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Verify Request This method gets a verify requests, including status of it
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>Task of ApiResponse (CheckVerifyResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CheckVerifyResponse>> GetVerifyAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VerifyApi->GetVerify");

            var localVarPath = "/v2/verify/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetVerify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CheckVerifyResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CheckVerifyResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CheckVerifyResponse)));
        }

        /// <summary>
        /// Request Verify This method will generate a code and send a message with it to a recipient
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>VerifyIdResponse</returns>
        public VerifyIdResponse RequestVerify (VerifyRequest body = null)
        {
             ApiResponse<VerifyIdResponse> localVarResponse = RequestVerifyWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Request Verify This method will generate a code and send a message with it to a recipient
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of VerifyIdResponse</returns>
        public ApiResponse< VerifyIdResponse > RequestVerifyWithHttpInfo (VerifyRequest body = null)
        {

            var localVarPath = "/v2/verify/request";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestVerify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifyIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VerifyIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifyIdResponse)));
        }

        /// <summary>
        /// Request Verify This method will generate a code and send a message with it to a recipient
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of VerifyIdResponse</returns>
        public async System.Threading.Tasks.Task<VerifyIdResponse> RequestVerifyAsync (VerifyRequest body = null)
        {
             ApiResponse<VerifyIdResponse> localVarResponse = await RequestVerifyAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Request Verify This method will generate a code and send a message with it to a recipient
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (VerifyIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<VerifyIdResponse>> RequestVerifyAsyncWithHttpInfo (VerifyRequest body = null)
        {

            var localVarPath = "/v2/verify/request";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RequestVerify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<VerifyIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (VerifyIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(VerifyIdResponse)));
        }

        /// <summary>
        /// Resend Verify Code This method will resend the requested verify. A new code will be generated and sent to the recipient
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>List&lt;VerifyIdResponse&gt;</returns>
        public List<VerifyIdResponse> ResendVerify (string id)
        {
             ApiResponse<List<VerifyIdResponse>> localVarResponse = ResendVerifyWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Resend Verify Code This method will resend the requested verify. A new code will be generated and sent to the recipient
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>ApiResponse of List&lt;VerifyIdResponse&gt;</returns>
        public ApiResponse< List<VerifyIdResponse> > ResendVerifyWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VerifyApi->ResendVerify");

            var localVarPath = "/v2/verify/{id}/resend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendVerify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VerifyIdResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<VerifyIdResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VerifyIdResponse>)));
        }

        /// <summary>
        /// Resend Verify Code This method will resend the requested verify. A new code will be generated and sent to the recipient
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>Task of List&lt;VerifyIdResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<VerifyIdResponse>> ResendVerifyAsync (string id)
        {
             ApiResponse<List<VerifyIdResponse>> localVarResponse = await ResendVerifyAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Resend Verify Code This method will resend the requested verify. A new code will be generated and sent to the recipient
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <returns>Task of ApiResponse (List&lt;VerifyIdResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VerifyIdResponse>>> ResendVerifyAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VerifyApi->ResendVerify");

            var localVarPath = "/v2/verify/{id}/resend";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ResendVerify", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VerifyIdResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<VerifyIdResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VerifyIdResponse>)));
        }

        /// <summary>
        /// Validate Verify Code This method validates the code submitted by the recipient. This request should be made by the sender of the Verify request
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>List&lt;VerifyIdResponse&gt;</returns>
        public List<VerifyIdResponse> ValidateVerifyCode (string id, ValidateCodeVerifyRequest body = null)
        {
             ApiResponse<List<VerifyIdResponse>> localVarResponse = ValidateVerifyCodeWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Validate Verify Code This method validates the code submitted by the recipient. This request should be made by the sender of the Verify request
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of List&lt;VerifyIdResponse&gt;</returns>
        public ApiResponse< List<VerifyIdResponse> > ValidateVerifyCodeWithHttpInfo (string id, ValidateCodeVerifyRequest body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VerifyApi->ValidateVerifyCode");

            var localVarPath = "/v2/verify/{id}/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateVerifyCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VerifyIdResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<VerifyIdResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VerifyIdResponse>)));
        }

        /// <summary>
        /// Validate Verify Code This method validates the code submitted by the recipient. This request should be made by the sender of the Verify request
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of List&lt;VerifyIdResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<VerifyIdResponse>> ValidateVerifyCodeAsync (string id, ValidateCodeVerifyRequest body = null)
        {
             ApiResponse<List<VerifyIdResponse>> localVarResponse = await ValidateVerifyCodeAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Validate Verify Code This method validates the code submitted by the recipient. This request should be made by the sender of the Verify request
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Verify Request</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;VerifyIdResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<VerifyIdResponse>>> ValidateVerifyCodeAsyncWithHttpInfo (string id, ValidateCodeVerifyRequest body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling VerifyApi->ValidateVerifyCode");

            var localVarPath = "/v2/verify/{id}/validate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateVerifyCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<VerifyIdResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<VerifyIdResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<VerifyIdResponse>)));
        }

    }
}
