/* 
 * Transactional API
 *
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IReportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Email Report
        /// </summary>
        /// <remarks>
        /// Retrieve Mail Reports and Statistics. Entries can be customizable
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">The name of the group to search (optional)</param>
        /// <param name="groupBy">The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)</param>
        /// <param name="dateStart">The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <param name="dateEnd">The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <returns>List&lt;EmailReportResponse&gt;</returns>
        List<EmailReportResponse> ProduceEmailReport (string group = null, string groupBy = null, string dateStart = null, string dateEnd = null);

        /// <summary>
        /// Get Email Report
        /// </summary>
        /// <remarks>
        /// Retrieve Mail Reports and Statistics. Entries can be customizable
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">The name of the group to search (optional)</param>
        /// <param name="groupBy">The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)</param>
        /// <param name="dateStart">The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <param name="dateEnd">The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <returns>ApiResponse of List&lt;EmailReportResponse&gt;</returns>
        ApiResponse<List<EmailReportResponse>> ProduceEmailReportWithHttpInfo (string group = null, string groupBy = null, string dateStart = null, string dateEnd = null);
        /// <summary>
        /// Get Sms Report
        /// </summary>
        /// <remarks>
        /// Retrieve Sms Reports and Statistics. Entries can be customizable
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">The id of the group to search (optional)</param>
        /// <param name="groupBy">The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)</param>
        /// <param name="dateStart">The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <param name="dateEnd">The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <returns>List&lt;SmsReportResponse&gt;</returns>
        List<SmsReportResponse> ProduceSmsReport (string group = null, string groupBy = null, string dateStart = null, string dateEnd = null);

        /// <summary>
        /// Get Sms Report
        /// </summary>
        /// <remarks>
        /// Retrieve Sms Reports and Statistics. Entries can be customizable
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">The id of the group to search (optional)</param>
        /// <param name="groupBy">The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)</param>
        /// <param name="dateStart">The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <param name="dateEnd">The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <returns>ApiResponse of List&lt;SmsReportResponse&gt;</returns>
        ApiResponse<List<SmsReportResponse>> ProduceSmsReportWithHttpInfo (string group = null, string groupBy = null, string dateStart = null, string dateEnd = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Email Report
        /// </summary>
        /// <remarks>
        /// Retrieve Mail Reports and Statistics. Entries can be customizable
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">The name of the group to search (optional)</param>
        /// <param name="groupBy">The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)</param>
        /// <param name="dateStart">The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <param name="dateEnd">The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <returns>Task of List&lt;EmailReportResponse&gt;</returns>
        System.Threading.Tasks.Task<List<EmailReportResponse>> ProduceEmailReportAsync (string group = null, string groupBy = null, string dateStart = null, string dateEnd = null);

        /// <summary>
        /// Get Email Report
        /// </summary>
        /// <remarks>
        /// Retrieve Mail Reports and Statistics. Entries can be customizable
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">The name of the group to search (optional)</param>
        /// <param name="groupBy">The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)</param>
        /// <param name="dateStart">The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <param name="dateEnd">The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EmailReportResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<EmailReportResponse>>> ProduceEmailReportAsyncWithHttpInfo (string group = null, string groupBy = null, string dateStart = null, string dateEnd = null);
        /// <summary>
        /// Get Sms Report
        /// </summary>
        /// <remarks>
        /// Retrieve Sms Reports and Statistics. Entries can be customizable
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">The id of the group to search (optional)</param>
        /// <param name="groupBy">The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)</param>
        /// <param name="dateStart">The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <param name="dateEnd">The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <returns>Task of List&lt;SmsReportResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SmsReportResponse>> ProduceSmsReportAsync (string group = null, string groupBy = null, string dateStart = null, string dateEnd = null);

        /// <summary>
        /// Get Sms Report
        /// </summary>
        /// <remarks>
        /// Retrieve Sms Reports and Statistics. Entries can be customizable
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">The id of the group to search (optional)</param>
        /// <param name="groupBy">The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)</param>
        /// <param name="dateStart">The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <param name="dateEnd">The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SmsReportResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SmsReportResponse>>> ProduceSmsReportAsyncWithHttpInfo (string group = null, string groupBy = null, string dateStart = null, string dateEnd = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ReportsApi : IReportsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ReportsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Email Report Retrieve Mail Reports and Statistics. Entries can be customizable
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">The name of the group to search (optional)</param>
        /// <param name="groupBy">The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)</param>
        /// <param name="dateStart">The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <param name="dateEnd">The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <returns>List&lt;EmailReportResponse&gt;</returns>
        public List<EmailReportResponse> ProduceEmailReport (string group = null, string groupBy = null, string dateStart = null, string dateEnd = null)
        {
             ApiResponse<List<EmailReportResponse>> localVarResponse = ProduceEmailReportWithHttpInfo(group, groupBy, dateStart, dateEnd);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Email Report Retrieve Mail Reports and Statistics. Entries can be customizable
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">The name of the group to search (optional)</param>
        /// <param name="groupBy">The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)</param>
        /// <param name="dateStart">The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <param name="dateEnd">The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <returns>ApiResponse of List&lt;EmailReportResponse&gt;</returns>
        public ApiResponse< List<EmailReportResponse> > ProduceEmailReportWithHttpInfo (string group = null, string groupBy = null, string dateStart = null, string dateEnd = null)
        {

            var localVarPath = "/v2/email/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (groupBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupBy", groupBy)); // query parameter
            if (dateStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateStart", dateStart)); // query parameter
            if (dateEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateEnd", dateEnd)); // query parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProduceEmailReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EmailReportResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EmailReportResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EmailReportResponse>)));
        }

        /// <summary>
        /// Get Email Report Retrieve Mail Reports and Statistics. Entries can be customizable
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">The name of the group to search (optional)</param>
        /// <param name="groupBy">The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)</param>
        /// <param name="dateStart">The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <param name="dateEnd">The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <returns>Task of List&lt;EmailReportResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<EmailReportResponse>> ProduceEmailReportAsync (string group = null, string groupBy = null, string dateStart = null, string dateEnd = null)
        {
             ApiResponse<List<EmailReportResponse>> localVarResponse = await ProduceEmailReportAsyncWithHttpInfo(group, groupBy, dateStart, dateEnd);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Email Report Retrieve Mail Reports and Statistics. Entries can be customizable
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">The name of the group to search (optional)</param>
        /// <param name="groupBy">The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)</param>
        /// <param name="dateStart">The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <param name="dateEnd">The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;EmailReportResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<EmailReportResponse>>> ProduceEmailReportAsyncWithHttpInfo (string group = null, string groupBy = null, string dateStart = null, string dateEnd = null)
        {

            var localVarPath = "/v2/email/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (groupBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupBy", groupBy)); // query parameter
            if (dateStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateStart", dateStart)); // query parameter
            if (dateEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateEnd", dateEnd)); // query parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProduceEmailReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<EmailReportResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<EmailReportResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<EmailReportResponse>)));
        }

        /// <summary>
        /// Get Sms Report Retrieve Sms Reports and Statistics. Entries can be customizable
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">The id of the group to search (optional)</param>
        /// <param name="groupBy">The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)</param>
        /// <param name="dateStart">The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <param name="dateEnd">The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <returns>List&lt;SmsReportResponse&gt;</returns>
        public List<SmsReportResponse> ProduceSmsReport (string group = null, string groupBy = null, string dateStart = null, string dateEnd = null)
        {
             ApiResponse<List<SmsReportResponse>> localVarResponse = ProduceSmsReportWithHttpInfo(group, groupBy, dateStart, dateEnd);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Sms Report Retrieve Sms Reports and Statistics. Entries can be customizable
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">The id of the group to search (optional)</param>
        /// <param name="groupBy">The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)</param>
        /// <param name="dateStart">The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <param name="dateEnd">The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <returns>ApiResponse of List&lt;SmsReportResponse&gt;</returns>
        public ApiResponse< List<SmsReportResponse> > ProduceSmsReportWithHttpInfo (string group = null, string groupBy = null, string dateStart = null, string dateEnd = null)
        {

            var localVarPath = "/v2/sms/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (groupBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupBy", groupBy)); // query parameter
            if (dateStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateStart", dateStart)); // query parameter
            if (dateEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateEnd", dateEnd)); // query parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProduceSmsReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SmsReportResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SmsReportResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SmsReportResponse>)));
        }

        /// <summary>
        /// Get Sms Report Retrieve Sms Reports and Statistics. Entries can be customizable
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">The id of the group to search (optional)</param>
        /// <param name="groupBy">The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)</param>
        /// <param name="dateStart">The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <param name="dateEnd">The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <returns>Task of List&lt;SmsReportResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SmsReportResponse>> ProduceSmsReportAsync (string group = null, string groupBy = null, string dateStart = null, string dateEnd = null)
        {
             ApiResponse<List<SmsReportResponse>> localVarResponse = await ProduceSmsReportAsyncWithHttpInfo(group, groupBy, dateStart, dateEnd);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Sms Report Retrieve Sms Reports and Statistics. Entries can be customizable
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="group">The id of the group to search (optional)</param>
        /// <param name="groupBy">The option to group the results. Can be either &#x60;&#x60;day&#x60;&#x60; or &#x60;&#x60;month&#x60;&#x60;. Defaults to &#x60;&#x60;day&#x60;&#x60; if none are present (optional)</param>
        /// <param name="dateStart">The date to start the report. Date must be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <param name="dateEnd">The date to end the report. Date should be in format &#x60;&#x60;yyyy-MM-dd&#x60;&#x60; (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SmsReportResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SmsReportResponse>>> ProduceSmsReportAsyncWithHttpInfo (string group = null, string groupBy = null, string dateStart = null, string dateEnd = null)
        {

            var localVarPath = "/v2/sms/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (groupBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "groupBy", groupBy)); // query parameter
            if (dateStart != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateStart", dateStart)); // query parameter
            if (dateEnd != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateEnd", dateEnd)); // query parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProduceSmsReport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SmsReportResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SmsReportResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SmsReportResponse>)));
        }

    }
}
