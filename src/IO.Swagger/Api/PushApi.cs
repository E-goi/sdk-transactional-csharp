/* 
 * Transactional API
 *
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IPushApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create App
        /// </summary>
        /// <remarks>
        /// Creates a new App
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>TemplateIdResponse</returns>
        TemplateIdResponse AddApp (MobileAppRequest body = null);

        /// <summary>
        /// Create App
        /// </summary>
        /// <remarks>
        /// Creates a new App
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TemplateIdResponse</returns>
        ApiResponse<TemplateIdResponse> AddAppWithHttpInfo (MobileAppRequest body = null);
        /// <summary>
        /// Create Push Template
        /// </summary>
        /// <remarks>
        /// Creates a new template record for Push
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>TemplateIdResponse</returns>
        TemplateIdResponse AddPushTemplate (PushTemplateRequest body = null);

        /// <summary>
        /// Create Push Template
        /// </summary>
        /// <remarks>
        /// Creates a new template record for Push
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TemplateIdResponse</returns>
        ApiResponse<TemplateIdResponse> AddPushTemplateWithHttpInfo (PushTemplateRequest body = null);
        /// <summary>
        /// Remove App
        /// </summary>
        /// <remarks>
        /// Remove App
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the app. Cannot be empty.</param>
        /// <returns></returns>
        void DeleteApp (string id);

        /// <summary>
        /// Remove App
        /// </summary>
        /// <remarks>
        /// Remove App
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the app. Cannot be empty.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteAppWithHttpInfo (string id);
        /// <summary>
        /// Remove Push Template
        /// </summary>
        /// <remarks>
        /// Remove Push Template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <returns></returns>
        void DeletePushTemplate (string id);

        /// <summary>
        /// Remove Push Template
        /// </summary>
        /// <remarks>
        /// Remove Push Template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePushTemplateWithHttpInfo (string id);
        /// <summary>
        /// Get an App
        /// </summary>
        /// <remarks>
        /// Gets an App
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the App. Cannot be empty.</param>
        /// <returns>MobileAppIdResponse</returns>
        MobileAppIdResponse ListApp (string id);

        /// <summary>
        /// Get an App
        /// </summary>
        /// <remarks>
        /// Gets an App
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the App. Cannot be empty.</param>
        /// <returns>ApiResponse of MobileAppIdResponse</returns>
        ApiResponse<MobileAppIdResponse> ListAppWithHttpInfo (string id);
        /// <summary>
        /// Get All Apps
        /// </summary>
        /// <remarks>
        /// Obtains all the Apps
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MobileAppResponse&gt;</returns>
        List<MobileAppResponse> ListApps ();

        /// <summary>
        /// Get All Apps
        /// </summary>
        /// <remarks>
        /// Obtains all the Apps
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MobileAppResponse&gt;</returns>
        ApiResponse<List<MobileAppResponse>> ListAppsWithHttpInfo ();
        /// <summary>
        /// Get an Push Template
        /// </summary>
        /// <remarks>
        /// Gets an Push Template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <returns>SinglePushTemplateResponse</returns>
        SinglePushTemplateResponse ListPushTemplate (string id);

        /// <summary>
        /// Get an Push Template
        /// </summary>
        /// <remarks>
        /// Gets an Push Template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <returns>ApiResponse of SinglePushTemplateResponse</returns>
        ApiResponse<SinglePushTemplateResponse> ListPushTemplateWithHttpInfo (string id);
        /// <summary>
        /// Get All Push Templates
        /// </summary>
        /// <remarks>
        /// Obtains all the Push templates
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SinglePushTemplateResponse&gt;</returns>
        List<SinglePushTemplateResponse> ListPushTemplates ();

        /// <summary>
        /// Get All Push Templates
        /// </summary>
        /// <remarks>
        /// Obtains all the Push templates
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SinglePushTemplateResponse&gt;</returns>
        ApiResponse<List<SinglePushTemplateResponse>> ListPushTemplatesWithHttpInfo ();
        /// <summary>
        /// Send a Push Message
        /// </summary>
        /// <remarks>
        /// Send an push message to a recipient
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">default response (optional)</param>
        /// <returns>List&lt;SendMessageIdResponse&gt;</returns>
        List<SendMessageIdResponse> SendPushMessages (List<Object> body = null);

        /// <summary>
        /// Send a Push Message
        /// </summary>
        /// <remarks>
        /// Send an push message to a recipient
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">default response (optional)</param>
        /// <returns>ApiResponse of List&lt;SendMessageIdResponse&gt;</returns>
        ApiResponse<List<SendMessageIdResponse>> SendPushMessagesWithHttpInfo (List<Object> body = null);
        /// <summary>
        /// Update App
        /// </summary>
        /// <remarks>
        /// Updates an App, given a template id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>MobileAppIdResponse</returns>
        MobileAppIdResponse UpdateApp (string id, MobileAppRequest body = null);

        /// <summary>
        /// Update App
        /// </summary>
        /// <remarks>
        /// Updates an App, given a template id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MobileAppIdResponse</returns>
        ApiResponse<MobileAppIdResponse> UpdateAppWithHttpInfo (string id, MobileAppRequest body = null);
        /// <summary>
        /// Update Push Template
        /// </summary>
        /// <remarks>
        /// Updates an Push template, given a template id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SinglePushTemplateResponse</returns>
        SinglePushTemplateResponse UpdatePushTemplate (string id, PushTemplateRequest body = null);

        /// <summary>
        /// Update Push Template
        /// </summary>
        /// <remarks>
        /// Updates an Push template, given a template id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SinglePushTemplateResponse</returns>
        ApiResponse<SinglePushTemplateResponse> UpdatePushTemplateWithHttpInfo (string id, PushTemplateRequest body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create App
        /// </summary>
        /// <remarks>
        /// Creates a new App
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TemplateIdResponse</returns>
        System.Threading.Tasks.Task<TemplateIdResponse> AddAppAsync (MobileAppRequest body = null);

        /// <summary>
        /// Create App
        /// </summary>
        /// <remarks>
        /// Creates a new App
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateIdResponse>> AddAppAsyncWithHttpInfo (MobileAppRequest body = null);
        /// <summary>
        /// Create Push Template
        /// </summary>
        /// <remarks>
        /// Creates a new template record for Push
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TemplateIdResponse</returns>
        System.Threading.Tasks.Task<TemplateIdResponse> AddPushTemplateAsync (PushTemplateRequest body = null);

        /// <summary>
        /// Create Push Template
        /// </summary>
        /// <remarks>
        /// Creates a new template record for Push
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplateIdResponse>> AddPushTemplateAsyncWithHttpInfo (PushTemplateRequest body = null);
        /// <summary>
        /// Remove App
        /// </summary>
        /// <remarks>
        /// Remove App
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the app. Cannot be empty.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteAppAsync (string id);

        /// <summary>
        /// Remove App
        /// </summary>
        /// <remarks>
        /// Remove App
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the app. Cannot be empty.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAppAsyncWithHttpInfo (string id);
        /// <summary>
        /// Remove Push Template
        /// </summary>
        /// <remarks>
        /// Remove Push Template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePushTemplateAsync (string id);

        /// <summary>
        /// Remove Push Template
        /// </summary>
        /// <remarks>
        /// Remove Push Template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePushTemplateAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get an App
        /// </summary>
        /// <remarks>
        /// Gets an App
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the App. Cannot be empty.</param>
        /// <returns>Task of MobileAppIdResponse</returns>
        System.Threading.Tasks.Task<MobileAppIdResponse> ListAppAsync (string id);

        /// <summary>
        /// Get an App
        /// </summary>
        /// <remarks>
        /// Gets an App
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the App. Cannot be empty.</param>
        /// <returns>Task of ApiResponse (MobileAppIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MobileAppIdResponse>> ListAppAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get All Apps
        /// </summary>
        /// <remarks>
        /// Obtains all the Apps
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MobileAppResponse&gt;</returns>
        System.Threading.Tasks.Task<List<MobileAppResponse>> ListAppsAsync ();

        /// <summary>
        /// Get All Apps
        /// </summary>
        /// <remarks>
        /// Obtains all the Apps
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MobileAppResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MobileAppResponse>>> ListAppsAsyncWithHttpInfo ();
        /// <summary>
        /// Get an Push Template
        /// </summary>
        /// <remarks>
        /// Gets an Push Template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <returns>Task of SinglePushTemplateResponse</returns>
        System.Threading.Tasks.Task<SinglePushTemplateResponse> ListPushTemplateAsync (string id);

        /// <summary>
        /// Get an Push Template
        /// </summary>
        /// <remarks>
        /// Gets an Push Template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <returns>Task of ApiResponse (SinglePushTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SinglePushTemplateResponse>> ListPushTemplateAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get All Push Templates
        /// </summary>
        /// <remarks>
        /// Obtains all the Push templates
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SinglePushTemplateResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SinglePushTemplateResponse>> ListPushTemplatesAsync ();

        /// <summary>
        /// Get All Push Templates
        /// </summary>
        /// <remarks>
        /// Obtains all the Push templates
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SinglePushTemplateResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SinglePushTemplateResponse>>> ListPushTemplatesAsyncWithHttpInfo ();
        /// <summary>
        /// Send a Push Message
        /// </summary>
        /// <remarks>
        /// Send an push message to a recipient
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">default response (optional)</param>
        /// <returns>Task of List&lt;SendMessageIdResponse&gt;</returns>
        System.Threading.Tasks.Task<List<SendMessageIdResponse>> SendPushMessagesAsync (List<Object> body = null);

        /// <summary>
        /// Send a Push Message
        /// </summary>
        /// <remarks>
        /// Send an push message to a recipient
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">default response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SendMessageIdResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<SendMessageIdResponse>>> SendPushMessagesAsyncWithHttpInfo (List<Object> body = null);
        /// <summary>
        /// Update App
        /// </summary>
        /// <remarks>
        /// Updates an App, given a template id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MobileAppIdResponse</returns>
        System.Threading.Tasks.Task<MobileAppIdResponse> UpdateAppAsync (string id, MobileAppRequest body = null);

        /// <summary>
        /// Update App
        /// </summary>
        /// <remarks>
        /// Updates an App, given a template id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MobileAppIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MobileAppIdResponse>> UpdateAppAsyncWithHttpInfo (string id, MobileAppRequest body = null);
        /// <summary>
        /// Update Push Template
        /// </summary>
        /// <remarks>
        /// Updates an Push template, given a template id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SinglePushTemplateResponse</returns>
        System.Threading.Tasks.Task<SinglePushTemplateResponse> UpdatePushTemplateAsync (string id, PushTemplateRequest body = null);

        /// <summary>
        /// Update Push Template
        /// </summary>
        /// <remarks>
        /// Updates an Push template, given a template id
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SinglePushTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SinglePushTemplateResponse>> UpdatePushTemplateAsyncWithHttpInfo (string id, PushTemplateRequest body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class PushApi : IPushApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PushApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PushApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PushApi"/> class
        /// </summary>
        /// <returns></returns>
        public PushApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PushApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PushApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create App Creates a new App
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>TemplateIdResponse</returns>
        public TemplateIdResponse AddApp (MobileAppRequest body = null)
        {
             ApiResponse<TemplateIdResponse> localVarResponse = AddAppWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create App Creates a new App
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TemplateIdResponse</returns>
        public ApiResponse< TemplateIdResponse > AddAppWithHttpInfo (MobileAppRequest body = null)
        {

            var localVarPath = "/v2/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplateIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateIdResponse)));
        }

        /// <summary>
        /// Create App Creates a new App
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TemplateIdResponse</returns>
        public async System.Threading.Tasks.Task<TemplateIdResponse> AddAppAsync (MobileAppRequest body = null)
        {
             ApiResponse<TemplateIdResponse> localVarResponse = await AddAppAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create App Creates a new App
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateIdResponse>> AddAppAsyncWithHttpInfo (MobileAppRequest body = null)
        {

            var localVarPath = "/v2/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplateIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateIdResponse)));
        }

        /// <summary>
        /// Create Push Template Creates a new template record for Push
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>TemplateIdResponse</returns>
        public TemplateIdResponse AddPushTemplate (PushTemplateRequest body = null)
        {
             ApiResponse<TemplateIdResponse> localVarResponse = AddPushTemplateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Push Template Creates a new template record for Push
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of TemplateIdResponse</returns>
        public ApiResponse< TemplateIdResponse > AddPushTemplateWithHttpInfo (PushTemplateRequest body = null)
        {

            var localVarPath = "/v2/push/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPushTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplateIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateIdResponse)));
        }

        /// <summary>
        /// Create Push Template Creates a new template record for Push
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of TemplateIdResponse</returns>
        public async System.Threading.Tasks.Task<TemplateIdResponse> AddPushTemplateAsync (PushTemplateRequest body = null)
        {
             ApiResponse<TemplateIdResponse> localVarResponse = await AddPushTemplateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Push Template Creates a new template record for Push
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (TemplateIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplateIdResponse>> AddPushTemplateAsyncWithHttpInfo (PushTemplateRequest body = null)
        {

            var localVarPath = "/v2/push/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddPushTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplateIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplateIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplateIdResponse)));
        }

        /// <summary>
        /// Remove App Remove App
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the app. Cannot be empty.</param>
        /// <returns></returns>
        public void DeleteApp (string id)
        {
             DeleteAppWithHttpInfo(id);
        }

        /// <summary>
        /// Remove App Remove App
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the app. Cannot be empty.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteAppWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushApi->DeleteApp");

            var localVarPath = "/v2/apps/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove App Remove App
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the app. Cannot be empty.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteAppAsync (string id)
        {
             await DeleteAppAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Remove App Remove App
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the app. Cannot be empty.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteAppAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushApi->DeleteApp");

            var localVarPath = "/v2/apps/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove Push Template Remove Push Template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <returns></returns>
        public void DeletePushTemplate (string id)
        {
             DeletePushTemplateWithHttpInfo(id);
        }

        /// <summary>
        /// Remove Push Template Remove Push Template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePushTemplateWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushApi->DeletePushTemplate");

            var localVarPath = "/v2/push/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePushTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove Push Template Remove Push Template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePushTemplateAsync (string id)
        {
             await DeletePushTemplateAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Remove Push Template Remove Push Template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePushTemplateAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushApi->DeletePushTemplate");

            var localVarPath = "/v2/push/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePushTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get an App Gets an App
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the App. Cannot be empty.</param>
        /// <returns>MobileAppIdResponse</returns>
        public MobileAppIdResponse ListApp (string id)
        {
             ApiResponse<MobileAppIdResponse> localVarResponse = ListAppWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an App Gets an App
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the App. Cannot be empty.</param>
        /// <returns>ApiResponse of MobileAppIdResponse</returns>
        public ApiResponse< MobileAppIdResponse > ListAppWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushApi->ListApp");

            var localVarPath = "/v2/apps/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MobileAppIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MobileAppIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MobileAppIdResponse)));
        }

        /// <summary>
        /// Get an App Gets an App
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the App. Cannot be empty.</param>
        /// <returns>Task of MobileAppIdResponse</returns>
        public async System.Threading.Tasks.Task<MobileAppIdResponse> ListAppAsync (string id)
        {
             ApiResponse<MobileAppIdResponse> localVarResponse = await ListAppAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an App Gets an App
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the App. Cannot be empty.</param>
        /// <returns>Task of ApiResponse (MobileAppIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MobileAppIdResponse>> ListAppAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushApi->ListApp");

            var localVarPath = "/v2/apps/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MobileAppIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MobileAppIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MobileAppIdResponse)));
        }

        /// <summary>
        /// Get All Apps Obtains all the Apps
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MobileAppResponse&gt;</returns>
        public List<MobileAppResponse> ListApps ()
        {
             ApiResponse<List<MobileAppResponse>> localVarResponse = ListAppsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Apps Obtains all the Apps
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MobileAppResponse&gt;</returns>
        public ApiResponse< List<MobileAppResponse> > ListAppsWithHttpInfo ()
        {

            var localVarPath = "/v2/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MobileAppResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MobileAppResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MobileAppResponse>)));
        }

        /// <summary>
        /// Get All Apps Obtains all the Apps
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MobileAppResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<MobileAppResponse>> ListAppsAsync ()
        {
             ApiResponse<List<MobileAppResponse>> localVarResponse = await ListAppsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Apps Obtains all the Apps
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MobileAppResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MobileAppResponse>>> ListAppsAsyncWithHttpInfo ()
        {

            var localVarPath = "/v2/apps";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListApps", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MobileAppResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MobileAppResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MobileAppResponse>)));
        }

        /// <summary>
        /// Get an Push Template Gets an Push Template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <returns>SinglePushTemplateResponse</returns>
        public SinglePushTemplateResponse ListPushTemplate (string id)
        {
             ApiResponse<SinglePushTemplateResponse> localVarResponse = ListPushTemplateWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an Push Template Gets an Push Template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <returns>ApiResponse of SinglePushTemplateResponse</returns>
        public ApiResponse< SinglePushTemplateResponse > ListPushTemplateWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushApi->ListPushTemplate");

            var localVarPath = "/v2/push/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPushTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SinglePushTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SinglePushTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SinglePushTemplateResponse)));
        }

        /// <summary>
        /// Get an Push Template Gets an Push Template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <returns>Task of SinglePushTemplateResponse</returns>
        public async System.Threading.Tasks.Task<SinglePushTemplateResponse> ListPushTemplateAsync (string id)
        {
             ApiResponse<SinglePushTemplateResponse> localVarResponse = await ListPushTemplateAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an Push Template Gets an Push Template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <returns>Task of ApiResponse (SinglePushTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SinglePushTemplateResponse>> ListPushTemplateAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushApi->ListPushTemplate");

            var localVarPath = "/v2/push/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPushTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SinglePushTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SinglePushTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SinglePushTemplateResponse)));
        }

        /// <summary>
        /// Get All Push Templates Obtains all the Push templates
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;SinglePushTemplateResponse&gt;</returns>
        public List<SinglePushTemplateResponse> ListPushTemplates ()
        {
             ApiResponse<List<SinglePushTemplateResponse>> localVarResponse = ListPushTemplatesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Push Templates Obtains all the Push templates
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;SinglePushTemplateResponse&gt;</returns>
        public ApiResponse< List<SinglePushTemplateResponse> > ListPushTemplatesWithHttpInfo ()
        {

            var localVarPath = "/v2/push/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPushTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SinglePushTemplateResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SinglePushTemplateResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SinglePushTemplateResponse>)));
        }

        /// <summary>
        /// Get All Push Templates Obtains all the Push templates
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;SinglePushTemplateResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SinglePushTemplateResponse>> ListPushTemplatesAsync ()
        {
             ApiResponse<List<SinglePushTemplateResponse>> localVarResponse = await ListPushTemplatesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Push Templates Obtains all the Push templates
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;SinglePushTemplateResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SinglePushTemplateResponse>>> ListPushTemplatesAsyncWithHttpInfo ()
        {

            var localVarPath = "/v2/push/templates";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPushTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SinglePushTemplateResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SinglePushTemplateResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SinglePushTemplateResponse>)));
        }

        /// <summary>
        /// Send a Push Message Send an push message to a recipient
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">default response (optional)</param>
        /// <returns>List&lt;SendMessageIdResponse&gt;</returns>
        public List<SendMessageIdResponse> SendPushMessages (List<Object> body = null)
        {
             ApiResponse<List<SendMessageIdResponse>> localVarResponse = SendPushMessagesWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send a Push Message Send an push message to a recipient
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">default response (optional)</param>
        /// <returns>ApiResponse of List&lt;SendMessageIdResponse&gt;</returns>
        public ApiResponse< List<SendMessageIdResponse> > SendPushMessagesWithHttpInfo (List<Object> body = null)
        {

            var localVarPath = "/v2/push/messages/action/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendPushMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SendMessageIdResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SendMessageIdResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SendMessageIdResponse>)));
        }

        /// <summary>
        /// Send a Push Message Send an push message to a recipient
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">default response (optional)</param>
        /// <returns>Task of List&lt;SendMessageIdResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<SendMessageIdResponse>> SendPushMessagesAsync (List<Object> body = null)
        {
             ApiResponse<List<SendMessageIdResponse>> localVarResponse = await SendPushMessagesAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send a Push Message Send an push message to a recipient
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">default response (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;SendMessageIdResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<SendMessageIdResponse>>> SendPushMessagesAsyncWithHttpInfo (List<Object> body = null)
        {

            var localVarPath = "/v2/push/messages/action/send";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SendPushMessages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<SendMessageIdResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<SendMessageIdResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<SendMessageIdResponse>)));
        }

        /// <summary>
        /// Update App Updates an App, given a template id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>MobileAppIdResponse</returns>
        public MobileAppIdResponse UpdateApp (string id, MobileAppRequest body = null)
        {
             ApiResponse<MobileAppIdResponse> localVarResponse = UpdateAppWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update App Updates an App, given a template id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MobileAppIdResponse</returns>
        public ApiResponse< MobileAppIdResponse > UpdateAppWithHttpInfo (string id, MobileAppRequest body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushApi->UpdateApp");

            var localVarPath = "/v2/apps/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MobileAppIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MobileAppIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MobileAppIdResponse)));
        }

        /// <summary>
        /// Update App Updates an App, given a template id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MobileAppIdResponse</returns>
        public async System.Threading.Tasks.Task<MobileAppIdResponse> UpdateAppAsync (string id, MobileAppRequest body = null)
        {
             ApiResponse<MobileAppIdResponse> localVarResponse = await UpdateAppAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update App Updates an App, given a template id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MobileAppIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MobileAppIdResponse>> UpdateAppAsyncWithHttpInfo (string id, MobileAppRequest body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushApi->UpdateApp");

            var localVarPath = "/v2/apps/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateApp", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MobileAppIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MobileAppIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MobileAppIdResponse)));
        }

        /// <summary>
        /// Update Push Template Updates an Push template, given a template id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>SinglePushTemplateResponse</returns>
        public SinglePushTemplateResponse UpdatePushTemplate (string id, PushTemplateRequest body = null)
        {
             ApiResponse<SinglePushTemplateResponse> localVarResponse = UpdatePushTemplateWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update Push Template Updates an Push template, given a template id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of SinglePushTemplateResponse</returns>
        public ApiResponse< SinglePushTemplateResponse > UpdatePushTemplateWithHttpInfo (string id, PushTemplateRequest body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushApi->UpdatePushTemplate");

            var localVarPath = "/v2/push/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePushTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SinglePushTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SinglePushTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SinglePushTemplateResponse)));
        }

        /// <summary>
        /// Update Push Template Updates an Push template, given a template id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of SinglePushTemplateResponse</returns>
        public async System.Threading.Tasks.Task<SinglePushTemplateResponse> UpdatePushTemplateAsync (string id, PushTemplateRequest body = null)
        {
             ApiResponse<SinglePushTemplateResponse> localVarResponse = await UpdatePushTemplateAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update Push Template Updates an Push template, given a template id
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of the Push Template. Cannot be empty.</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (SinglePushTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SinglePushTemplateResponse>> UpdatePushTemplateAsyncWithHttpInfo (string id, PushTemplateRequest body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PushApi->UpdatePushTemplate");

            var localVarPath = "/v2/push/templates/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdatePushTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SinglePushTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SinglePushTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SinglePushTemplateResponse)));
        }

    }
}
