/* 
 * Transactional API
 *
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IMultiChannelApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Multi-Channel Flow
        /// </summary>
        /// <remarks>
        /// This method will create and add a Multi-Channel Flow. First message doesn&#x27;t need interval or condition, since it doesn&#x27;t depend on other messages
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>MultiChannelFlowIdResponse</returns>
        MultiChannelFlowIdResponse CreateMultiChannelFlow (MultiChannelFlowRequest body = null);

        /// <summary>
        /// Create Multi-Channel Flow
        /// </summary>
        /// <remarks>
        /// This method will create and add a Multi-Channel Flow. First message doesn&#x27;t need interval or condition, since it doesn&#x27;t depend on other messages
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MultiChannelFlowIdResponse</returns>
        ApiResponse<MultiChannelFlowIdResponse> CreateMultiChannelFlowWithHttpInfo (MultiChannelFlowRequest body = null);
        /// <summary>
        /// Execute Multi-Channel
        /// </summary>
        /// <remarks>
        /// This method will create and start a flow, sending the Multi-Channel of messages to the appropriate recipient
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>MultiChannelIdResponse</returns>
        MultiChannelIdResponse ExecuteMultiChannel (ExecuteMultiChannelRequest body = null);

        /// <summary>
        /// Execute Multi-Channel
        /// </summary>
        /// <remarks>
        /// This method will create and start a flow, sending the Multi-Channel of messages to the appropriate recipient
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MultiChannelIdResponse</returns>
        ApiResponse<MultiChannelIdResponse> ExecuteMultiChannelWithHttpInfo (ExecuteMultiChannelRequest body = null);
        /// <summary>
        /// Get Single Multi-Channel Flow
        /// </summary>
        /// <remarks>
        /// This method returns the Multi-Channel Flow wih the id in the path
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Multi-Channel Flow</param>
        /// <returns>List&lt;MultiChannelFlowResponse&gt;</returns>
        List<MultiChannelFlowResponse> ListMultiChannel2 (string id);

        /// <summary>
        /// Get Single Multi-Channel Flow
        /// </summary>
        /// <remarks>
        /// This method returns the Multi-Channel Flow wih the id in the path
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Multi-Channel Flow</param>
        /// <returns>ApiResponse of List&lt;MultiChannelFlowResponse&gt;</returns>
        ApiResponse<List<MultiChannelFlowResponse>> ListMultiChannel2WithHttpInfo (string id);
        /// <summary>
        /// Get All Multi-Channel Flows
        /// </summary>
        /// <remarks>
        /// This method returns all Multi-Channels Flows set in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MultiChannelFlowResponse&gt;</returns>
        List<MultiChannelFlowResponse> ListMultiChannels ();

        /// <summary>
        /// Get All Multi-Channel Flows
        /// </summary>
        /// <remarks>
        /// This method returns all Multi-Channels Flows set in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MultiChannelFlowResponse&gt;</returns>
        ApiResponse<List<MultiChannelFlowResponse>> ListMultiChannelsWithHttpInfo ();
        /// <summary>
        /// Remove Single Multi-Channel
        /// </summary>
        /// <remarks>
        /// This method removes a Multi-Channel Flow from the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Multi-Channel Flow to remove</param>
        /// <returns></returns>
        void RemoveMultiChannel (string id);

        /// <summary>
        /// Remove Single Multi-Channel
        /// </summary>
        /// <remarks>
        /// This method removes a Multi-Channel Flow from the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Multi-Channel Flow to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveMultiChannelWithHttpInfo (string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Multi-Channel Flow
        /// </summary>
        /// <remarks>
        /// This method will create and add a Multi-Channel Flow. First message doesn&#x27;t need interval or condition, since it doesn&#x27;t depend on other messages
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MultiChannelFlowIdResponse</returns>
        System.Threading.Tasks.Task<MultiChannelFlowIdResponse> CreateMultiChannelFlowAsync (MultiChannelFlowRequest body = null);

        /// <summary>
        /// Create Multi-Channel Flow
        /// </summary>
        /// <remarks>
        /// This method will create and add a Multi-Channel Flow. First message doesn&#x27;t need interval or condition, since it doesn&#x27;t depend on other messages
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MultiChannelFlowIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiChannelFlowIdResponse>> CreateMultiChannelFlowAsyncWithHttpInfo (MultiChannelFlowRequest body = null);
        /// <summary>
        /// Execute Multi-Channel
        /// </summary>
        /// <remarks>
        /// This method will create and start a flow, sending the Multi-Channel of messages to the appropriate recipient
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MultiChannelIdResponse</returns>
        System.Threading.Tasks.Task<MultiChannelIdResponse> ExecuteMultiChannelAsync (ExecuteMultiChannelRequest body = null);

        /// <summary>
        /// Execute Multi-Channel
        /// </summary>
        /// <remarks>
        /// This method will create and start a flow, sending the Multi-Channel of messages to the appropriate recipient
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MultiChannelIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<MultiChannelIdResponse>> ExecuteMultiChannelAsyncWithHttpInfo (ExecuteMultiChannelRequest body = null);
        /// <summary>
        /// Get Single Multi-Channel Flow
        /// </summary>
        /// <remarks>
        /// This method returns the Multi-Channel Flow wih the id in the path
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Multi-Channel Flow</param>
        /// <returns>Task of List&lt;MultiChannelFlowResponse&gt;</returns>
        System.Threading.Tasks.Task<List<MultiChannelFlowResponse>> ListMultiChannel2Async (string id);

        /// <summary>
        /// Get Single Multi-Channel Flow
        /// </summary>
        /// <remarks>
        /// This method returns the Multi-Channel Flow wih the id in the path
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Multi-Channel Flow</param>
        /// <returns>Task of ApiResponse (List&lt;MultiChannelFlowResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MultiChannelFlowResponse>>> ListMultiChannel2AsyncWithHttpInfo (string id);
        /// <summary>
        /// Get All Multi-Channel Flows
        /// </summary>
        /// <remarks>
        /// This method returns all Multi-Channels Flows set in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MultiChannelFlowResponse&gt;</returns>
        System.Threading.Tasks.Task<List<MultiChannelFlowResponse>> ListMultiChannelsAsync ();

        /// <summary>
        /// Get All Multi-Channel Flows
        /// </summary>
        /// <remarks>
        /// This method returns all Multi-Channels Flows set in the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MultiChannelFlowResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<MultiChannelFlowResponse>>> ListMultiChannelsAsyncWithHttpInfo ();
        /// <summary>
        /// Remove Single Multi-Channel
        /// </summary>
        /// <remarks>
        /// This method removes a Multi-Channel Flow from the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Multi-Channel Flow to remove</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveMultiChannelAsync (string id);

        /// <summary>
        /// Remove Single Multi-Channel
        /// </summary>
        /// <remarks>
        /// This method removes a Multi-Channel Flow from the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Multi-Channel Flow to remove</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveMultiChannelAsyncWithHttpInfo (string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class MultiChannelApi : IMultiChannelApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MultiChannelApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MultiChannelApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultiChannelApi"/> class
        /// </summary>
        /// <returns></returns>
        public MultiChannelApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MultiChannelApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MultiChannelApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Multi-Channel Flow This method will create and add a Multi-Channel Flow. First message doesn&#x27;t need interval or condition, since it doesn&#x27;t depend on other messages
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>MultiChannelFlowIdResponse</returns>
        public MultiChannelFlowIdResponse CreateMultiChannelFlow (MultiChannelFlowRequest body = null)
        {
             ApiResponse<MultiChannelFlowIdResponse> localVarResponse = CreateMultiChannelFlowWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Multi-Channel Flow This method will create and add a Multi-Channel Flow. First message doesn&#x27;t need interval or condition, since it doesn&#x27;t depend on other messages
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MultiChannelFlowIdResponse</returns>
        public ApiResponse< MultiChannelFlowIdResponse > CreateMultiChannelFlowWithHttpInfo (MultiChannelFlowRequest body = null)
        {

            var localVarPath = "/v2/multi-channel/flow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMultiChannelFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiChannelFlowIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiChannelFlowIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiChannelFlowIdResponse)));
        }

        /// <summary>
        /// Create Multi-Channel Flow This method will create and add a Multi-Channel Flow. First message doesn&#x27;t need interval or condition, since it doesn&#x27;t depend on other messages
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MultiChannelFlowIdResponse</returns>
        public async System.Threading.Tasks.Task<MultiChannelFlowIdResponse> CreateMultiChannelFlowAsync (MultiChannelFlowRequest body = null)
        {
             ApiResponse<MultiChannelFlowIdResponse> localVarResponse = await CreateMultiChannelFlowAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Multi-Channel Flow This method will create and add a Multi-Channel Flow. First message doesn&#x27;t need interval or condition, since it doesn&#x27;t depend on other messages
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MultiChannelFlowIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiChannelFlowIdResponse>> CreateMultiChannelFlowAsyncWithHttpInfo (MultiChannelFlowRequest body = null)
        {

            var localVarPath = "/v2/multi-channel/flow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateMultiChannelFlow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiChannelFlowIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiChannelFlowIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiChannelFlowIdResponse)));
        }

        /// <summary>
        /// Execute Multi-Channel This method will create and start a flow, sending the Multi-Channel of messages to the appropriate recipient
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>MultiChannelIdResponse</returns>
        public MultiChannelIdResponse ExecuteMultiChannel (ExecuteMultiChannelRequest body = null)
        {
             ApiResponse<MultiChannelIdResponse> localVarResponse = ExecuteMultiChannelWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute Multi-Channel This method will create and start a flow, sending the Multi-Channel of messages to the appropriate recipient
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of MultiChannelIdResponse</returns>
        public ApiResponse< MultiChannelIdResponse > ExecuteMultiChannelWithHttpInfo (ExecuteMultiChannelRequest body = null)
        {

            var localVarPath = "/v2/multi-channel/execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteMultiChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiChannelIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiChannelIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiChannelIdResponse)));
        }

        /// <summary>
        /// Execute Multi-Channel This method will create and start a flow, sending the Multi-Channel of messages to the appropriate recipient
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of MultiChannelIdResponse</returns>
        public async System.Threading.Tasks.Task<MultiChannelIdResponse> ExecuteMultiChannelAsync (ExecuteMultiChannelRequest body = null)
        {
             ApiResponse<MultiChannelIdResponse> localVarResponse = await ExecuteMultiChannelAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute Multi-Channel This method will create and start a flow, sending the Multi-Channel of messages to the appropriate recipient
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (MultiChannelIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MultiChannelIdResponse>> ExecuteMultiChannelAsyncWithHttpInfo (ExecuteMultiChannelRequest body = null)
        {

            var localVarPath = "/v2/multi-channel/execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteMultiChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MultiChannelIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (MultiChannelIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(MultiChannelIdResponse)));
        }

        /// <summary>
        /// Get Single Multi-Channel Flow This method returns the Multi-Channel Flow wih the id in the path
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Multi-Channel Flow</param>
        /// <returns>List&lt;MultiChannelFlowResponse&gt;</returns>
        public List<MultiChannelFlowResponse> ListMultiChannel2 (string id)
        {
             ApiResponse<List<MultiChannelFlowResponse>> localVarResponse = ListMultiChannel2WithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Single Multi-Channel Flow This method returns the Multi-Channel Flow wih the id in the path
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Multi-Channel Flow</param>
        /// <returns>ApiResponse of List&lt;MultiChannelFlowResponse&gt;</returns>
        public ApiResponse< List<MultiChannelFlowResponse> > ListMultiChannel2WithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MultiChannelApi->ListMultiChannel2");

            var localVarPath = "/v2/multi-channel/flow/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMultiChannel2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MultiChannelFlowResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MultiChannelFlowResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MultiChannelFlowResponse>)));
        }

        /// <summary>
        /// Get Single Multi-Channel Flow This method returns the Multi-Channel Flow wih the id in the path
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Multi-Channel Flow</param>
        /// <returns>Task of List&lt;MultiChannelFlowResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<MultiChannelFlowResponse>> ListMultiChannel2Async (string id)
        {
             ApiResponse<List<MultiChannelFlowResponse>> localVarResponse = await ListMultiChannel2AsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Single Multi-Channel Flow This method returns the Multi-Channel Flow wih the id in the path
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Multi-Channel Flow</param>
        /// <returns>Task of ApiResponse (List&lt;MultiChannelFlowResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MultiChannelFlowResponse>>> ListMultiChannel2AsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MultiChannelApi->ListMultiChannel2");

            var localVarPath = "/v2/multi-channel/flow/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMultiChannel2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MultiChannelFlowResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MultiChannelFlowResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MultiChannelFlowResponse>)));
        }

        /// <summary>
        /// Get All Multi-Channel Flows This method returns all Multi-Channels Flows set in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;MultiChannelFlowResponse&gt;</returns>
        public List<MultiChannelFlowResponse> ListMultiChannels ()
        {
             ApiResponse<List<MultiChannelFlowResponse>> localVarResponse = ListMultiChannelsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Multi-Channel Flows This method returns all Multi-Channels Flows set in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;MultiChannelFlowResponse&gt;</returns>
        public ApiResponse< List<MultiChannelFlowResponse> > ListMultiChannelsWithHttpInfo ()
        {

            var localVarPath = "/v2/multi-channel/flow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMultiChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MultiChannelFlowResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MultiChannelFlowResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MultiChannelFlowResponse>)));
        }

        /// <summary>
        /// Get All Multi-Channel Flows This method returns all Multi-Channels Flows set in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;MultiChannelFlowResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<MultiChannelFlowResponse>> ListMultiChannelsAsync ()
        {
             ApiResponse<List<MultiChannelFlowResponse>> localVarResponse = await ListMultiChannelsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Multi-Channel Flows This method returns all Multi-Channels Flows set in the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;MultiChannelFlowResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<MultiChannelFlowResponse>>> ListMultiChannelsAsyncWithHttpInfo ()
        {

            var localVarPath = "/v2/multi-channel/flow";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMultiChannels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<MultiChannelFlowResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<MultiChannelFlowResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<MultiChannelFlowResponse>)));
        }

        /// <summary>
        /// Remove Single Multi-Channel This method removes a Multi-Channel Flow from the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Multi-Channel Flow to remove</param>
        /// <returns></returns>
        public void RemoveMultiChannel (string id)
        {
             RemoveMultiChannelWithHttpInfo(id);
        }

        /// <summary>
        /// Remove Single Multi-Channel This method removes a Multi-Channel Flow from the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Multi-Channel Flow to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveMultiChannelWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MultiChannelApi->RemoveMultiChannel");

            var localVarPath = "/v2/multi-channel/flow/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMultiChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove Single Multi-Channel This method removes a Multi-Channel Flow from the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Multi-Channel Flow to remove</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveMultiChannelAsync (string id)
        {
             await RemoveMultiChannelAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Remove Single Multi-Channel This method removes a Multi-Channel Flow from the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Multi-Channel Flow to remove</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveMultiChannelAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling MultiChannelApi->RemoveMultiChannel");

            var localVarPath = "/v2/multi-channel/flow/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveMultiChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
