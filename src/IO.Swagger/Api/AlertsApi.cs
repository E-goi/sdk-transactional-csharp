/* 
 * Transactional API
 *
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IAlertsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Change Single Alert Template
        /// </summary>
        /// <remarks>
        /// This method will change information about the template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>AlertTemplateResponse</returns>
        AlertTemplateResponse ChangeAlertTemplate (string id, AlertTemplateRequest body = null);

        /// <summary>
        /// Change Single Alert Template
        /// </summary>
        /// <remarks>
        /// This method will change information about the template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AlertTemplateResponse</returns>
        ApiResponse<AlertTemplateResponse> ChangeAlertTemplateWithHttpInfo (string id, AlertTemplateRequest body = null);
        /// <summary>
        /// Create Alert Template
        /// </summary>
        /// <remarks>
        /// This method will create and add an alert template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AlertTemplateIdResponse</returns>
        AlertTemplateIdResponse CreateAlertTemplate (AlertTemplateRequest body = null);

        /// <summary>
        /// Create Alert Template
        /// </summary>
        /// <remarks>
        /// This method will create and add an alert template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AlertTemplateIdResponse</returns>
        ApiResponse<AlertTemplateIdResponse> CreateAlertTemplateWithHttpInfo (AlertTemplateRequest body = null);
        /// <summary>
        /// Execute Alert
        /// </summary>
        /// <remarks>
        /// This method executes an alert flow , using a pre-created alert template.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">default response (optional)</param>
        /// <returns>AlertIdResponse</returns>
        AlertIdResponse ExecuteEmailAlert (Body body = null);

        /// <summary>
        /// Execute Alert
        /// </summary>
        /// <remarks>
        /// This method executes an alert flow , using a pre-created alert template.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">default response (optional)</param>
        /// <returns>ApiResponse of AlertIdResponse</returns>
        ApiResponse<AlertIdResponse> ExecuteEmailAlertWithHttpInfo (Body body = null);
        /// <summary>
        /// Get Single Alert Template
        /// </summary>
        /// <remarks>
        /// This method returns the Alert Template wih the id in the path
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template</param>
        /// <returns>AlertTemplateResponse</returns>
        AlertTemplateResponse ListMultiChannel (string id);

        /// <summary>
        /// Get Single Alert Template
        /// </summary>
        /// <remarks>
        /// This method returns the Alert Template wih the id in the path
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template</param>
        /// <returns>ApiResponse of AlertTemplateResponse</returns>
        ApiResponse<AlertTemplateResponse> ListMultiChannelWithHttpInfo (string id);
        /// <summary>
        /// Get All Alert Template
        /// </summary>
        /// <remarks>
        /// This method returns all the Alert Templates
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AlertTemplateResponse&gt;</returns>
        List<AlertTemplateResponse> ListMultiChannel1 ();

        /// <summary>
        /// Get All Alert Template
        /// </summary>
        /// <remarks>
        /// This method returns all the Alert Templates
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AlertTemplateResponse&gt;</returns>
        ApiResponse<List<AlertTemplateResponse>> ListMultiChannel1WithHttpInfo ();
        /// <summary>
        /// Remove Alert Template
        /// </summary>
        /// <remarks>
        /// This method removes an Alert Template from the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template to remove</param>
        /// <returns></returns>
        void RemoveAlertTemplate (string id);

        /// <summary>
        /// Remove Alert Template
        /// </summary>
        /// <remarks>
        /// This method removes an Alert Template from the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RemoveAlertTemplateWithHttpInfo (string id);
        /// <summary>
        /// Stop Alert
        /// </summary>
        /// <remarks>
        /// This method will stop any alerts that are being processed
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AlertIdResponse</returns>
        AlertIdResponse StopAlert (CancelAlertRequest body = null);

        /// <summary>
        /// Stop Alert
        /// </summary>
        /// <remarks>
        /// This method will stop any alerts that are being processed
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AlertIdResponse</returns>
        ApiResponse<AlertIdResponse> StopAlertWithHttpInfo (CancelAlertRequest body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Change Single Alert Template
        /// </summary>
        /// <remarks>
        /// This method will change information about the template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AlertTemplateResponse</returns>
        System.Threading.Tasks.Task<AlertTemplateResponse> ChangeAlertTemplateAsync (string id, AlertTemplateRequest body = null);

        /// <summary>
        /// Change Single Alert Template
        /// </summary>
        /// <remarks>
        /// This method will change information about the template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AlertTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertTemplateResponse>> ChangeAlertTemplateAsyncWithHttpInfo (string id, AlertTemplateRequest body = null);
        /// <summary>
        /// Create Alert Template
        /// </summary>
        /// <remarks>
        /// This method will create and add an alert template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AlertTemplateIdResponse</returns>
        System.Threading.Tasks.Task<AlertTemplateIdResponse> CreateAlertTemplateAsync (AlertTemplateRequest body = null);

        /// <summary>
        /// Create Alert Template
        /// </summary>
        /// <remarks>
        /// This method will create and add an alert template
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AlertTemplateIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertTemplateIdResponse>> CreateAlertTemplateAsyncWithHttpInfo (AlertTemplateRequest body = null);
        /// <summary>
        /// Execute Alert
        /// </summary>
        /// <remarks>
        /// This method executes an alert flow , using a pre-created alert template.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">default response (optional)</param>
        /// <returns>Task of AlertIdResponse</returns>
        System.Threading.Tasks.Task<AlertIdResponse> ExecuteEmailAlertAsync (Body body = null);

        /// <summary>
        /// Execute Alert
        /// </summary>
        /// <remarks>
        /// This method executes an alert flow , using a pre-created alert template.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">default response (optional)</param>
        /// <returns>Task of ApiResponse (AlertIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertIdResponse>> ExecuteEmailAlertAsyncWithHttpInfo (Body body = null);
        /// <summary>
        /// Get Single Alert Template
        /// </summary>
        /// <remarks>
        /// This method returns the Alert Template wih the id in the path
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template</param>
        /// <returns>Task of AlertTemplateResponse</returns>
        System.Threading.Tasks.Task<AlertTemplateResponse> ListMultiChannelAsync (string id);

        /// <summary>
        /// Get Single Alert Template
        /// </summary>
        /// <remarks>
        /// This method returns the Alert Template wih the id in the path
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template</param>
        /// <returns>Task of ApiResponse (AlertTemplateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertTemplateResponse>> ListMultiChannelAsyncWithHttpInfo (string id);
        /// <summary>
        /// Get All Alert Template
        /// </summary>
        /// <remarks>
        /// This method returns all the Alert Templates
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AlertTemplateResponse&gt;</returns>
        System.Threading.Tasks.Task<List<AlertTemplateResponse>> ListMultiChannel1Async ();

        /// <summary>
        /// Get All Alert Template
        /// </summary>
        /// <remarks>
        /// This method returns all the Alert Templates
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AlertTemplateResponse&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AlertTemplateResponse>>> ListMultiChannel1AsyncWithHttpInfo ();
        /// <summary>
        /// Remove Alert Template
        /// </summary>
        /// <remarks>
        /// This method removes an Alert Template from the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template to remove</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RemoveAlertTemplateAsync (string id);

        /// <summary>
        /// Remove Alert Template
        /// </summary>
        /// <remarks>
        /// This method removes an Alert Template from the system
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template to remove</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAlertTemplateAsyncWithHttpInfo (string id);
        /// <summary>
        /// Stop Alert
        /// </summary>
        /// <remarks>
        /// This method will stop any alerts that are being processed
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AlertIdResponse</returns>
        System.Threading.Tasks.Task<AlertIdResponse> StopAlertAsync (CancelAlertRequest body = null);

        /// <summary>
        /// Stop Alert
        /// </summary>
        /// <remarks>
        /// This method will stop any alerts that are being processed
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AlertIdResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AlertIdResponse>> StopAlertAsyncWithHttpInfo (CancelAlertRequest body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class AlertsApi : IAlertsApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AlertsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertsApi"/> class
        /// </summary>
        /// <returns></returns>
        public AlertsApi()
        {
            this.Configuration = IO.Swagger.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AlertsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AlertsApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Change Single Alert Template This method will change information about the template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>AlertTemplateResponse</returns>
        public AlertTemplateResponse ChangeAlertTemplate (string id, AlertTemplateRequest body = null)
        {
             ApiResponse<AlertTemplateResponse> localVarResponse = ChangeAlertTemplateWithHttpInfo(id, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change Single Alert Template This method will change information about the template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AlertTemplateResponse</returns>
        public ApiResponse< AlertTemplateResponse > ChangeAlertTemplateWithHttpInfo (string id, AlertTemplateRequest body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertsApi->ChangeAlertTemplate");

            var localVarPath = "/v2/alert/template/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeAlertTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlertTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertTemplateResponse)));
        }

        /// <summary>
        /// Change Single Alert Template This method will change information about the template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AlertTemplateResponse</returns>
        public async System.Threading.Tasks.Task<AlertTemplateResponse> ChangeAlertTemplateAsync (string id, AlertTemplateRequest body = null)
        {
             ApiResponse<AlertTemplateResponse> localVarResponse = await ChangeAlertTemplateAsyncWithHttpInfo(id, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change Single Alert Template This method will change information about the template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template to edit</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AlertTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertTemplateResponse>> ChangeAlertTemplateAsyncWithHttpInfo (string id, AlertTemplateRequest body = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertsApi->ChangeAlertTemplate");

            var localVarPath = "/v2/alert/template/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangeAlertTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlertTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertTemplateResponse)));
        }

        /// <summary>
        /// Create Alert Template This method will create and add an alert template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AlertTemplateIdResponse</returns>
        public AlertTemplateIdResponse CreateAlertTemplate (AlertTemplateRequest body = null)
        {
             ApiResponse<AlertTemplateIdResponse> localVarResponse = CreateAlertTemplateWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Alert Template This method will create and add an alert template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AlertTemplateIdResponse</returns>
        public ApiResponse< AlertTemplateIdResponse > CreateAlertTemplateWithHttpInfo (AlertTemplateRequest body = null)
        {

            var localVarPath = "/v2/alert/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAlertTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertTemplateIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlertTemplateIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertTemplateIdResponse)));
        }

        /// <summary>
        /// Create Alert Template This method will create and add an alert template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AlertTemplateIdResponse</returns>
        public async System.Threading.Tasks.Task<AlertTemplateIdResponse> CreateAlertTemplateAsync (AlertTemplateRequest body = null)
        {
             ApiResponse<AlertTemplateIdResponse> localVarResponse = await CreateAlertTemplateAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Alert Template This method will create and add an alert template
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AlertTemplateIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertTemplateIdResponse>> CreateAlertTemplateAsyncWithHttpInfo (AlertTemplateRequest body = null)
        {

            var localVarPath = "/v2/alert/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateAlertTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertTemplateIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlertTemplateIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertTemplateIdResponse)));
        }

        /// <summary>
        /// Execute Alert This method executes an alert flow , using a pre-created alert template.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">default response (optional)</param>
        /// <returns>AlertIdResponse</returns>
        public AlertIdResponse ExecuteEmailAlert (Body body = null)
        {
             ApiResponse<AlertIdResponse> localVarResponse = ExecuteEmailAlertWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute Alert This method executes an alert flow , using a pre-created alert template.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">default response (optional)</param>
        /// <returns>ApiResponse of AlertIdResponse</returns>
        public ApiResponse< AlertIdResponse > ExecuteEmailAlertWithHttpInfo (Body body = null)
        {

            var localVarPath = "/v2/alert/action/execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteEmailAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlertIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertIdResponse)));
        }

        /// <summary>
        /// Execute Alert This method executes an alert flow , using a pre-created alert template.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">default response (optional)</param>
        /// <returns>Task of AlertIdResponse</returns>
        public async System.Threading.Tasks.Task<AlertIdResponse> ExecuteEmailAlertAsync (Body body = null)
        {
             ApiResponse<AlertIdResponse> localVarResponse = await ExecuteEmailAlertAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute Alert This method executes an alert flow , using a pre-created alert template.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">default response (optional)</param>
        /// <returns>Task of ApiResponse (AlertIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertIdResponse>> ExecuteEmailAlertAsyncWithHttpInfo (Body body = null)
        {

            var localVarPath = "/v2/alert/action/execute";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExecuteEmailAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlertIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertIdResponse)));
        }

        /// <summary>
        /// Get Single Alert Template This method returns the Alert Template wih the id in the path
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template</param>
        /// <returns>AlertTemplateResponse</returns>
        public AlertTemplateResponse ListMultiChannel (string id)
        {
             ApiResponse<AlertTemplateResponse> localVarResponse = ListMultiChannelWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Single Alert Template This method returns the Alert Template wih the id in the path
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template</param>
        /// <returns>ApiResponse of AlertTemplateResponse</returns>
        public ApiResponse< AlertTemplateResponse > ListMultiChannelWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertsApi->ListMultiChannel");

            var localVarPath = "/v2/alert/template/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMultiChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlertTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertTemplateResponse)));
        }

        /// <summary>
        /// Get Single Alert Template This method returns the Alert Template wih the id in the path
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template</param>
        /// <returns>Task of AlertTemplateResponse</returns>
        public async System.Threading.Tasks.Task<AlertTemplateResponse> ListMultiChannelAsync (string id)
        {
             ApiResponse<AlertTemplateResponse> localVarResponse = await ListMultiChannelAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Single Alert Template This method returns the Alert Template wih the id in the path
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template</param>
        /// <returns>Task of ApiResponse (AlertTemplateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertTemplateResponse>> ListMultiChannelAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertsApi->ListMultiChannel");

            var localVarPath = "/v2/alert/template/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMultiChannel", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertTemplateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlertTemplateResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertTemplateResponse)));
        }

        /// <summary>
        /// Get All Alert Template This method returns all the Alert Templates
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AlertTemplateResponse&gt;</returns>
        public List<AlertTemplateResponse> ListMultiChannel1 ()
        {
             ApiResponse<List<AlertTemplateResponse>> localVarResponse = ListMultiChannel1WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Alert Template This method returns all the Alert Templates
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AlertTemplateResponse&gt;</returns>
        public ApiResponse< List<AlertTemplateResponse> > ListMultiChannel1WithHttpInfo ()
        {

            var localVarPath = "/v2/alert/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMultiChannel1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AlertTemplateResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AlertTemplateResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AlertTemplateResponse>)));
        }

        /// <summary>
        /// Get All Alert Template This method returns all the Alert Templates
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AlertTemplateResponse&gt;</returns>
        public async System.Threading.Tasks.Task<List<AlertTemplateResponse>> ListMultiChannel1Async ()
        {
             ApiResponse<List<AlertTemplateResponse>> localVarResponse = await ListMultiChannel1AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Alert Template This method returns all the Alert Templates
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AlertTemplateResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AlertTemplateResponse>>> ListMultiChannel1AsyncWithHttpInfo ()
        {

            var localVarPath = "/v2/alert/template";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMultiChannel1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AlertTemplateResponse>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<AlertTemplateResponse>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AlertTemplateResponse>)));
        }

        /// <summary>
        /// Remove Alert Template This method removes an Alert Template from the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template to remove</param>
        /// <returns></returns>
        public void RemoveAlertTemplate (string id)
        {
             RemoveAlertTemplateWithHttpInfo(id);
        }

        /// <summary>
        /// Remove Alert Template This method removes an Alert Template from the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template to remove</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RemoveAlertTemplateWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertsApi->RemoveAlertTemplate");

            var localVarPath = "/v2/alert/template/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAlertTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Remove Alert Template This method removes an Alert Template from the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template to remove</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RemoveAlertTemplateAsync (string id)
        {
             await RemoveAlertTemplateAsyncWithHttpInfo(id);

        }

        /// <summary>
        /// Remove Alert Template This method removes an Alert Template from the system
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">The id of the Alert Template to remove</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveAlertTemplateAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling AlertsApi->RemoveAlertTemplate");

            var localVarPath = "/v2/alert/template/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveAlertTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Stop Alert This method will stop any alerts that are being processed
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>AlertIdResponse</returns>
        public AlertIdResponse StopAlert (CancelAlertRequest body = null)
        {
             ApiResponse<AlertIdResponse> localVarResponse = StopAlertWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Stop Alert This method will stop any alerts that are being processed
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of AlertIdResponse</returns>
        public ApiResponse< AlertIdResponse > StopAlertWithHttpInfo (CancelAlertRequest body = null)
        {

            var localVarPath = "/v2/alert/action/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlertIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertIdResponse)));
        }

        /// <summary>
        /// Stop Alert This method will stop any alerts that are being processed
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of AlertIdResponse</returns>
        public async System.Threading.Tasks.Task<AlertIdResponse> StopAlertAsync (CancelAlertRequest body = null)
        {
             ApiResponse<AlertIdResponse> localVarResponse = await StopAlertAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Stop Alert This method will stop any alerts that are being processed
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse (AlertIdResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AlertIdResponse>> StopAlertAsyncWithHttpInfo (CancelAlertRequest body = null)
        {

            var localVarPath = "/v2/alert/action/stop";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (ApiKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("ApiKey")))
            {
                localVarHeaderParams["ApiKey"] = this.Configuration.GetApiKeyWithPrefix("ApiKey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StopAlert", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AlertIdResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AlertIdResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AlertIdResponse)));
        }

    }
}
