/* 
 * Transactional API
 *
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// The attachment to be attached in the email.
    /// </summary>
    [DataContract]
        public partial class AttachmentRequest :  IEquatable<AttachmentRequest>, IValidatableObject
    {
        /// <summary>
        /// Arrangement for the Attachment inside the email. Can be either: \&quot;inline\&quot; (appears inside the email message body) or \&quot;attachment\&quot; (appears as an enclosed file).
        /// </summary>
        /// <value>Arrangement for the Attachment inside the email. Can be either: \&quot;inline\&quot; (appears inside the email message body) or \&quot;attachment\&quot; (appears as an enclosed file).</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum ArrangementEnum
        {
            /// <summary>
            /// Enum Attachment for value: attachment
            /// </summary>
            [EnumMember(Value = "attachment")]
            Attachment = 1,
            /// <summary>
            /// Enum Inline for value: inline
            /// </summary>
            [EnumMember(Value = "inline")]
            Inline = 2        }
        /// <summary>
        /// Arrangement for the Attachment inside the email. Can be either: \&quot;inline\&quot; (appears inside the email message body) or \&quot;attachment\&quot; (appears as an enclosed file).
        /// </summary>
        /// <value>Arrangement for the Attachment inside the email. Can be either: \&quot;inline\&quot; (appears inside the email message body) or \&quot;attachment\&quot; (appears as an enclosed file).</value>
        [DataMember(Name="arrangement", EmitDefaultValue=false)]
        public ArrangementEnum Arrangement { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentRequest" /> class.
        /// </summary>
        /// <param name="filename">the filename of the file to go in the email. (required).</param>
        /// <param name="data">the base64 stream of information that comprises the file. (required).</param>
        /// <param name="mimeType">the format to buuild the file for the recipient. (required).</param>
        /// <param name="arrangement">Arrangement for the Attachment inside the email. Can be either: \&quot;inline\&quot; (appears inside the email message body) or \&quot;attachment\&quot; (appears as an enclosed file). (required) (default to ArrangementEnum.Attachment).</param>
        public AttachmentRequest(string filename = default(string), string data = default(string), string mimeType = default(string), ArrangementEnum arrangement = ArrangementEnum.Attachment)
        {
            // to ensure "filename" is required (not null)
            if (filename == null)
            {
                throw new InvalidDataException("filename is a required property for AttachmentRequest and cannot be null");
            }
            else
            {
                this.Filename = filename;
            }
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for AttachmentRequest and cannot be null");
            }
            else
            {
                this.Data = data;
            }
            // to ensure "mimeType" is required (not null)
            if (mimeType == null)
            {
                throw new InvalidDataException("mimeType is a required property for AttachmentRequest and cannot be null");
            }
            else
            {
                this.MimeType = mimeType;
            }
            // to ensure "arrangement" is required (not null)
            if (arrangement == null)
            {
                throw new InvalidDataException("arrangement is a required property for AttachmentRequest and cannot be null");
            }
            else
            {
                this.Arrangement = arrangement;
            }
        }
        
        /// <summary>
        /// the filename of the file to go in the email.
        /// </summary>
        /// <value>the filename of the file to go in the email.</value>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// the base64 stream of information that comprises the file.
        /// </summary>
        /// <value>the base64 stream of information that comprises the file.</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// the format to buuild the file for the recipient.
        /// </summary>
        /// <value>the format to buuild the file for the recipient.</value>
        [DataMember(Name="mimeType", EmitDefaultValue=false)]
        public string MimeType { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AttachmentRequest {\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("  Arrangement: ").Append(Arrangement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AttachmentRequest);
        }

        /// <summary>
        /// Returns true if AttachmentRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AttachmentRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttachmentRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.MimeType == input.MimeType ||
                    (this.MimeType != null &&
                    this.MimeType.Equals(input.MimeType))
                ) && 
                (
                    this.Arrangement == input.Arrangement ||
                    (this.Arrangement != null &&
                    this.Arrangement.Equals(input.Arrangement))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.MimeType != null)
                    hashCode = hashCode * 59 + this.MimeType.GetHashCode();
                if (this.Arrangement != null)
                    hashCode = hashCode * 59 + this.Arrangement.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
