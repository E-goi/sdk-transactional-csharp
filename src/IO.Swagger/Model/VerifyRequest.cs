/* 
 * Transactional API
 *
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// VerifyRequest
    /// </summary>
    [DataContract]
        public partial class VerifyRequest :  IEquatable<VerifyRequest>, IValidatableObject
    {
        /// <summary>
        /// the format of the code. can be:  Format | Description | RegEx - -- | - -- | - -- numeric | numbers | [0-9] alpha | letters | [A-Z] alphanumeric | numbers and letters | [0-9A-Z] hexa | numbers and letters up to F | [0-9A-F]
        /// </summary>
        /// <value>the format of the code. can be:  Format | Description | RegEx - -- | - -- | - -- numeric | numbers | [0-9] alpha | letters | [A-Z] alphanumeric | numbers and letters | [0-9A-Z] hexa | numbers and letters up to F | [0-9A-F]</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CodeTypeEnum
        {
            /// <summary>
            /// Enum Numeric for value: numeric
            /// </summary>
            [EnumMember(Value = "numeric")]
            Numeric = 1,
            /// <summary>
            /// Enum Alpha for value: alpha
            /// </summary>
            [EnumMember(Value = "alpha")]
            Alpha = 2,
            /// <summary>
            /// Enum Alphanumeric for value: alphanumeric
            /// </summary>
            [EnumMember(Value = "alphanumeric")]
            Alphanumeric = 3,
            /// <summary>
            /// Enum Hexa for value: hexa
            /// </summary>
            [EnumMember(Value = "hexa")]
            Hexa = 4        }
        /// <summary>
        /// the format of the code. can be:  Format | Description | RegEx - -- | - -- | - -- numeric | numbers | [0-9] alpha | letters | [A-Z] alphanumeric | numbers and letters | [0-9A-Z] hexa | numbers and letters up to F | [0-9A-F]
        /// </summary>
        /// <value>the format of the code. can be:  Format | Description | RegEx - -- | - -- | - -- numeric | numbers | [0-9] alpha | letters | [A-Z] alphanumeric | numbers and letters | [0-9A-Z] hexa | numbers and letters up to F | [0-9A-F]</value>
        [DataMember(Name="codeType", EmitDefaultValue=false)]
        public CodeTypeEnum? CodeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyRequest" /> class.
        /// </summary>
        /// <param name="senderId">The id of the sender. (required).</param>
        /// <param name="to">The phone number of the recipient of the code. Format should be &#x60;countryCode&#x60;-&#x60;phoneNumber&#x60; (required).</param>
        /// <param name="message">the message that the user is going to receive. location of the code should be given by using the tag {{ code }}. All instances of {{ code }} will be replaced with a code that is in accordance with the settings. If the tag is not present, the code will be added at the end of the message..</param>
        /// <param name="codeLength">the length of the code in characters. Maximum is 20 characters. Default is 6 characters. (default to 6).</param>
        /// <param name="codeValidity">the period of time the code is valid after the message has been sent, in seconds. Defaults to 600 seconds (10 min). Maximum validity is 3600 seconds (1 hour). (default to 600).</param>
        /// <param name="codeType">the format of the code. can be:  Format | Description | RegEx - -- | - -- | - -- numeric | numbers | [0-9] alpha | letters | [A-Z] alphanumeric | numbers and letters | [0-9A-Z] hexa | numbers and letters up to F | [0-9A-F] (default to CodeTypeEnum.Numeric).</param>
        public VerifyRequest(string senderId = default(string), string to = default(string), string message = default(string), int? codeLength = 6, int? codeValidity = 600, CodeTypeEnum? codeType = CodeTypeEnum.Numeric)
        {
            // to ensure "senderId" is required (not null)
            if (senderId == null)
            {
                throw new InvalidDataException("senderId is a required property for VerifyRequest and cannot be null");
            }
            else
            {
                this.SenderId = senderId;
            }
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for VerifyRequest and cannot be null");
            }
            else
            {
                this.To = to;
            }
            this.Message = message;
            // use default value if no "codeLength" provided
            if (codeLength == null)
            {
                this.CodeLength = 6;
            }
            else
            {
                this.CodeLength = codeLength;
            }
            // use default value if no "codeValidity" provided
            if (codeValidity == null)
            {
                this.CodeValidity = 600;
            }
            else
            {
                this.CodeValidity = codeValidity;
            }
            // use default value if no "codeType" provided
            if (codeType == null)
            {
                this.CodeType = CodeTypeEnum.Numeric;
            }
            else
            {
                this.CodeType = codeType;
            }
        }
        
        /// <summary>
        /// The id of the sender.
        /// </summary>
        /// <value>The id of the sender.</value>
        [DataMember(Name="senderId", EmitDefaultValue=false)]
        public string SenderId { get; set; }

        /// <summary>
        /// The phone number of the recipient of the code. Format should be &#x60;countryCode&#x60;-&#x60;phoneNumber&#x60;
        /// </summary>
        /// <value>The phone number of the recipient of the code. Format should be &#x60;countryCode&#x60;-&#x60;phoneNumber&#x60;</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// the message that the user is going to receive. location of the code should be given by using the tag {{ code }}. All instances of {{ code }} will be replaced with a code that is in accordance with the settings. If the tag is not present, the code will be added at the end of the message.
        /// </summary>
        /// <value>the message that the user is going to receive. location of the code should be given by using the tag {{ code }}. All instances of {{ code }} will be replaced with a code that is in accordance with the settings. If the tag is not present, the code will be added at the end of the message.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// the length of the code in characters. Maximum is 20 characters. Default is 6 characters.
        /// </summary>
        /// <value>the length of the code in characters. Maximum is 20 characters. Default is 6 characters.</value>
        [DataMember(Name="codeLength", EmitDefaultValue=false)]
        public int? CodeLength { get; set; }

        /// <summary>
        /// the period of time the code is valid after the message has been sent, in seconds. Defaults to 600 seconds (10 min). Maximum validity is 3600 seconds (1 hour).
        /// </summary>
        /// <value>the period of time the code is valid after the message has been sent, in seconds. Defaults to 600 seconds (10 min). Maximum validity is 3600 seconds (1 hour).</value>
        [DataMember(Name="codeValidity", EmitDefaultValue=false)]
        public int? CodeValidity { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VerifyRequest {\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  CodeLength: ").Append(CodeLength).Append("\n");
            sb.Append("  CodeValidity: ").Append(CodeValidity).Append("\n");
            sb.Append("  CodeType: ").Append(CodeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerifyRequest);
        }

        /// <summary>
        /// Returns true if VerifyRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of VerifyRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerifyRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SenderId == input.SenderId ||
                    (this.SenderId != null &&
                    this.SenderId.Equals(input.SenderId))
                ) && 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.CodeLength == input.CodeLength ||
                    (this.CodeLength != null &&
                    this.CodeLength.Equals(input.CodeLength))
                ) && 
                (
                    this.CodeValidity == input.CodeValidity ||
                    (this.CodeValidity != null &&
                    this.CodeValidity.Equals(input.CodeValidity))
                ) && 
                (
                    this.CodeType == input.CodeType ||
                    (this.CodeType != null &&
                    this.CodeType.Equals(input.CodeType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SenderId != null)
                    hashCode = hashCode * 59 + this.SenderId.GetHashCode();
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.CodeLength != null)
                    hashCode = hashCode * 59 + this.CodeLength.GetHashCode();
                if (this.CodeValidity != null)
                    hashCode = hashCode * 59 + this.CodeValidity.GetHashCode();
                if (this.CodeType != null)
                    hashCode = hashCode * 59 + this.CodeType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
