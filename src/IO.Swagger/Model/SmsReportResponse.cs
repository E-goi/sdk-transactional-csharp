/* 
 * Transactional API
 *
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SmsReportResponse
    /// </summary>
    [DataContract]
        public partial class SmsReportResponse :  IEquatable<SmsReportResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SmsReportResponse" /> class.
        /// </summary>
        /// <param name="groupId">groupId.</param>
        /// <param name="groupName">groupName.</param>
        /// <param name="metricsTotal">metricsTotal.</param>
        /// <param name="metricsTotalParts">metricsTotalParts.</param>
        /// <param name="metricsProcessed">metricsProcessed.</param>
        /// <param name="metricsSent">metricsSent.</param>
        /// <param name="metricsSentParts">metricsSentParts.</param>
        /// <param name="metricsDelivered">metricsDelivered.</param>
        /// <param name="metricsDeliveredParts">metricsDeliveredParts.</param>
        /// <param name="metricsRejected">metricsRejected.</param>
        /// <param name="metricsRejectedParts">metricsRejectedParts.</param>
        /// <param name="timePeriod">timePeriod.</param>
        public SmsReportResponse(string groupId = default(string), string groupName = default(string), int? metricsTotal = default(int?), int? metricsTotalParts = default(int?), int? metricsProcessed = default(int?), int? metricsSent = default(int?), int? metricsSentParts = default(int?), int? metricsDelivered = default(int?), int? metricsDeliveredParts = default(int?), int? metricsRejected = default(int?), int? metricsRejectedParts = default(int?), string timePeriod = default(string))
        {
            this.GroupId = groupId;
            this.GroupName = groupName;
            this.MetricsTotal = metricsTotal;
            this.MetricsTotalParts = metricsTotalParts;
            this.MetricsProcessed = metricsProcessed;
            this.MetricsSent = metricsSent;
            this.MetricsSentParts = metricsSentParts;
            this.MetricsDelivered = metricsDelivered;
            this.MetricsDeliveredParts = metricsDeliveredParts;
            this.MetricsRejected = metricsRejected;
            this.MetricsRejectedParts = metricsRejectedParts;
            this.TimePeriod = timePeriod;
        }
        
        /// <summary>
        /// Gets or Sets GroupId
        /// </summary>
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public string GroupId { get; set; }

        /// <summary>
        /// Gets or Sets GroupName
        /// </summary>
        [DataMember(Name="groupName", EmitDefaultValue=false)]
        public string GroupName { get; set; }

        /// <summary>
        /// Gets or Sets MetricsTotal
        /// </summary>
        [DataMember(Name="metricsTotal", EmitDefaultValue=false)]
        public int? MetricsTotal { get; set; }

        /// <summary>
        /// Gets or Sets MetricsTotalParts
        /// </summary>
        [DataMember(Name="metricsTotalParts", EmitDefaultValue=false)]
        public int? MetricsTotalParts { get; set; }

        /// <summary>
        /// Gets or Sets MetricsProcessed
        /// </summary>
        [DataMember(Name="metricsProcessed", EmitDefaultValue=false)]
        public int? MetricsProcessed { get; set; }

        /// <summary>
        /// Gets or Sets MetricsSent
        /// </summary>
        [DataMember(Name="metricsSent", EmitDefaultValue=false)]
        public int? MetricsSent { get; set; }

        /// <summary>
        /// Gets or Sets MetricsSentParts
        /// </summary>
        [DataMember(Name="metricsSentParts", EmitDefaultValue=false)]
        public int? MetricsSentParts { get; set; }

        /// <summary>
        /// Gets or Sets MetricsDelivered
        /// </summary>
        [DataMember(Name="metricsDelivered", EmitDefaultValue=false)]
        public int? MetricsDelivered { get; set; }

        /// <summary>
        /// Gets or Sets MetricsDeliveredParts
        /// </summary>
        [DataMember(Name="metricsDeliveredParts", EmitDefaultValue=false)]
        public int? MetricsDeliveredParts { get; set; }

        /// <summary>
        /// Gets or Sets MetricsRejected
        /// </summary>
        [DataMember(Name="metricsRejected", EmitDefaultValue=false)]
        public int? MetricsRejected { get; set; }

        /// <summary>
        /// Gets or Sets MetricsRejectedParts
        /// </summary>
        [DataMember(Name="metricsRejectedParts", EmitDefaultValue=false)]
        public int? MetricsRejectedParts { get; set; }

        /// <summary>
        /// Gets or Sets TimePeriod
        /// </summary>
        [DataMember(Name="timePeriod", EmitDefaultValue=false)]
        public string TimePeriod { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SmsReportResponse {\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  GroupName: ").Append(GroupName).Append("\n");
            sb.Append("  MetricsTotal: ").Append(MetricsTotal).Append("\n");
            sb.Append("  MetricsTotalParts: ").Append(MetricsTotalParts).Append("\n");
            sb.Append("  MetricsProcessed: ").Append(MetricsProcessed).Append("\n");
            sb.Append("  MetricsSent: ").Append(MetricsSent).Append("\n");
            sb.Append("  MetricsSentParts: ").Append(MetricsSentParts).Append("\n");
            sb.Append("  MetricsDelivered: ").Append(MetricsDelivered).Append("\n");
            sb.Append("  MetricsDeliveredParts: ").Append(MetricsDeliveredParts).Append("\n");
            sb.Append("  MetricsRejected: ").Append(MetricsRejected).Append("\n");
            sb.Append("  MetricsRejectedParts: ").Append(MetricsRejectedParts).Append("\n");
            sb.Append("  TimePeriod: ").Append(TimePeriod).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SmsReportResponse);
        }

        /// <summary>
        /// Returns true if SmsReportResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SmsReportResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SmsReportResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.GroupName == input.GroupName ||
                    (this.GroupName != null &&
                    this.GroupName.Equals(input.GroupName))
                ) && 
                (
                    this.MetricsTotal == input.MetricsTotal ||
                    (this.MetricsTotal != null &&
                    this.MetricsTotal.Equals(input.MetricsTotal))
                ) && 
                (
                    this.MetricsTotalParts == input.MetricsTotalParts ||
                    (this.MetricsTotalParts != null &&
                    this.MetricsTotalParts.Equals(input.MetricsTotalParts))
                ) && 
                (
                    this.MetricsProcessed == input.MetricsProcessed ||
                    (this.MetricsProcessed != null &&
                    this.MetricsProcessed.Equals(input.MetricsProcessed))
                ) && 
                (
                    this.MetricsSent == input.MetricsSent ||
                    (this.MetricsSent != null &&
                    this.MetricsSent.Equals(input.MetricsSent))
                ) && 
                (
                    this.MetricsSentParts == input.MetricsSentParts ||
                    (this.MetricsSentParts != null &&
                    this.MetricsSentParts.Equals(input.MetricsSentParts))
                ) && 
                (
                    this.MetricsDelivered == input.MetricsDelivered ||
                    (this.MetricsDelivered != null &&
                    this.MetricsDelivered.Equals(input.MetricsDelivered))
                ) && 
                (
                    this.MetricsDeliveredParts == input.MetricsDeliveredParts ||
                    (this.MetricsDeliveredParts != null &&
                    this.MetricsDeliveredParts.Equals(input.MetricsDeliveredParts))
                ) && 
                (
                    this.MetricsRejected == input.MetricsRejected ||
                    (this.MetricsRejected != null &&
                    this.MetricsRejected.Equals(input.MetricsRejected))
                ) && 
                (
                    this.MetricsRejectedParts == input.MetricsRejectedParts ||
                    (this.MetricsRejectedParts != null &&
                    this.MetricsRejectedParts.Equals(input.MetricsRejectedParts))
                ) && 
                (
                    this.TimePeriod == input.TimePeriod ||
                    (this.TimePeriod != null &&
                    this.TimePeriod.Equals(input.TimePeriod))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.GroupId != null)
                    hashCode = hashCode * 59 + this.GroupId.GetHashCode();
                if (this.GroupName != null)
                    hashCode = hashCode * 59 + this.GroupName.GetHashCode();
                if (this.MetricsTotal != null)
                    hashCode = hashCode * 59 + this.MetricsTotal.GetHashCode();
                if (this.MetricsTotalParts != null)
                    hashCode = hashCode * 59 + this.MetricsTotalParts.GetHashCode();
                if (this.MetricsProcessed != null)
                    hashCode = hashCode * 59 + this.MetricsProcessed.GetHashCode();
                if (this.MetricsSent != null)
                    hashCode = hashCode * 59 + this.MetricsSent.GetHashCode();
                if (this.MetricsSentParts != null)
                    hashCode = hashCode * 59 + this.MetricsSentParts.GetHashCode();
                if (this.MetricsDelivered != null)
                    hashCode = hashCode * 59 + this.MetricsDelivered.GetHashCode();
                if (this.MetricsDeliveredParts != null)
                    hashCode = hashCode * 59 + this.MetricsDeliveredParts.GetHashCode();
                if (this.MetricsRejected != null)
                    hashCode = hashCode * 59 + this.MetricsRejected.GetHashCode();
                if (this.MetricsRejectedParts != null)
                    hashCode = hashCode * 59 + this.MetricsRejectedParts.GetHashCode();
                if (this.TimePeriod != null)
                    hashCode = hashCode * 59 + this.TimePeriod.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
