/* 
 * Transactional API
 *
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// AlertTemplateRequest
    /// </summary>
    [DataContract]
        public partial class AlertTemplateRequest :  IEquatable<AlertTemplateRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlertTemplateRequest" /> class.
        /// </summary>
        /// <param name="name">the name to coloquially address the alert..</param>
        /// <param name="interval">The interval in seconds between messages to the recipient(s). Maximum interval is 86400 seconds (24 hours). (required).</param>
        /// <param name="maxAttempts">The maximum amount of attempts to be made. (required).</param>
        /// <param name="templateId">the id of the message template existent in the system..</param>
        /// <param name="subject">the subject of the message. only used in email alerts..</param>
        /// <param name="htmlBody">the html version of the body of the message. only used in email alerts..</param>
        /// <param name="textBody">the text version of the message..</param>
        public AlertTemplateRequest(string name = default(string), int? interval = default(int?), int? maxAttempts = default(int?), string templateId = default(string), string subject = default(string), string htmlBody = default(string), string textBody = default(string))
        {
            // to ensure "interval" is required (not null)
            if (interval == null)
            {
                throw new InvalidDataException("interval is a required property for AlertTemplateRequest and cannot be null");
            }
            else
            {
                this.Interval = interval;
            }
            // to ensure "maxAttempts" is required (not null)
            if (maxAttempts == null)
            {
                throw new InvalidDataException("maxAttempts is a required property for AlertTemplateRequest and cannot be null");
            }
            else
            {
                this.MaxAttempts = maxAttempts;
            }
            this.Name = name;
            this.TemplateId = templateId;
            this.Subject = subject;
            this.HtmlBody = htmlBody;
            this.TextBody = textBody;
        }
        
        /// <summary>
        /// the name to coloquially address the alert.
        /// </summary>
        /// <value>the name to coloquially address the alert.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The interval in seconds between messages to the recipient(s). Maximum interval is 86400 seconds (24 hours).
        /// </summary>
        /// <value>The interval in seconds between messages to the recipient(s). Maximum interval is 86400 seconds (24 hours).</value>
        [DataMember(Name="interval", EmitDefaultValue=false)]
        public int? Interval { get; set; }

        /// <summary>
        /// The maximum amount of attempts to be made.
        /// </summary>
        /// <value>The maximum amount of attempts to be made.</value>
        [DataMember(Name="maxAttempts", EmitDefaultValue=false)]
        public int? MaxAttempts { get; set; }

        /// <summary>
        /// the id of the message template existent in the system.
        /// </summary>
        /// <value>the id of the message template existent in the system.</value>
        [DataMember(Name="templateId", EmitDefaultValue=false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// the subject of the message. only used in email alerts.
        /// </summary>
        /// <value>the subject of the message. only used in email alerts.</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// the html version of the body of the message. only used in email alerts.
        /// </summary>
        /// <value>the html version of the body of the message. only used in email alerts.</value>
        [DataMember(Name="htmlBody", EmitDefaultValue=false)]
        public string HtmlBody { get; set; }

        /// <summary>
        /// the text version of the message.
        /// </summary>
        /// <value>the text version of the message.</value>
        [DataMember(Name="textBody", EmitDefaultValue=false)]
        public string TextBody { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AlertTemplateRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("  MaxAttempts: ").Append(MaxAttempts).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  HtmlBody: ").Append(HtmlBody).Append("\n");
            sb.Append("  TextBody: ").Append(TextBody).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlertTemplateRequest);
        }

        /// <summary>
        /// Returns true if AlertTemplateRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AlertTemplateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlertTemplateRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Interval == input.Interval ||
                    (this.Interval != null &&
                    this.Interval.Equals(input.Interval))
                ) && 
                (
                    this.MaxAttempts == input.MaxAttempts ||
                    (this.MaxAttempts != null &&
                    this.MaxAttempts.Equals(input.MaxAttempts))
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.HtmlBody == input.HtmlBody ||
                    (this.HtmlBody != null &&
                    this.HtmlBody.Equals(input.HtmlBody))
                ) && 
                (
                    this.TextBody == input.TextBody ||
                    (this.TextBody != null &&
                    this.TextBody.Equals(input.TextBody))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Interval != null)
                    hashCode = hashCode * 59 + this.Interval.GetHashCode();
                if (this.MaxAttempts != null)
                    hashCode = hashCode * 59 + this.MaxAttempts.GetHashCode();
                if (this.TemplateId != null)
                    hashCode = hashCode * 59 + this.TemplateId.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.HtmlBody != null)
                    hashCode = hashCode * 59 + this.HtmlBody.GetHashCode();
                if (this.TextBody != null)
                    hashCode = hashCode * 59 + this.TextBody.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
