/* 
 * Transactional API
 *
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ManualSMS
    /// </summary>
    [DataContract]
        public partial class ManualSMS :  IEquatable<ManualSMS>, IValidatableObject
    {
        /// <summary>
        /// the encoding of the message.
        /// </summary>
        /// <value>the encoding of the message.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum EncodingEnum
        {
            /// <summary>
            /// Enum Unicode for value: unicode
            /// </summary>
            [EnumMember(Value = "unicode")]
            Unicode = 1,
            /// <summary>
            /// Enum Gsm0338 for value: gsm0338
            /// </summary>
            [EnumMember(Value = "gsm0338")]
            Gsm0338 = 2        }
        /// <summary>
        /// the encoding of the message.
        /// </summary>
        /// <value>the encoding of the message.</value>
        [DataMember(Name="encoding", EmitDefaultValue=false)]
        public EncodingEnum? Encoding { get; set; }
        /// <summary>
        /// The priority of the message.
        /// </summary>
        /// <value>The priority of the message.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum PriorityEnum
        {
            /// <summary>
            /// Enum Urgent for value: urgent
            /// </summary>
            [EnumMember(Value = "urgent")]
            Urgent = 1,
            /// <summary>
            /// Enum NonUrgent for value: non-urgent
            /// </summary>
            [EnumMember(Value = "non-urgent")]
            NonUrgent = 2        }
        /// <summary>
        /// The priority of the message.
        /// </summary>
        /// <value>The priority of the message.</value>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public PriorityEnum? Priority { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManualSMS" /> class.
        /// </summary>
        /// <param name="to">The contact of the recipient. format should be countryCode-phoneNumber. (required).</param>
        /// <param name="from">The id of the sender. (required).</param>
        /// <param name="textBody">The content of the message. (required).</param>
        /// <param name="encoding">the encoding of the message..</param>
        /// <param name="maxCount">the maximum amount of messages to be sent (if the textBody is too big for a single message)..</param>
        /// <param name="mergeTags">A list of the merge tags to replace information gaps in the email. The format of each tag should be &#x60;&#x60;tagName:tagValue&#x60;&#x60;.</param>
        /// <param name="priority">The priority of the message. (default to PriorityEnum.NonUrgent).</param>
        /// <param name="customData">Extra Data related to the campaign to be re-sent via WebHook..</param>
        /// <param name="registered">option to register the message. Its an exclusive feature for senders that require it. (default to false).</param>
        /// <param name="group">The group of the message. (default to &quot;default&quot;).</param>
        public ManualSMS(string to = default(string), string from = default(string), string textBody = default(string), EncodingEnum? encoding = default(EncodingEnum?), int? maxCount = default(int?), List<string> mergeTags = default(List<string>), PriorityEnum? priority = PriorityEnum.NonUrgent, string customData = default(string), bool? registered = false, string group = "default")
        {
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new InvalidDataException("to is a required property for ManualSMS and cannot be null");
            }
            else
            {
                this.To = to;
            }
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new InvalidDataException("from is a required property for ManualSMS and cannot be null");
            }
            else
            {
                this.From = from;
            }
            // to ensure "textBody" is required (not null)
            if (textBody == null)
            {
                throw new InvalidDataException("textBody is a required property for ManualSMS and cannot be null");
            }
            else
            {
                this.TextBody = textBody;
            }
            this.Encoding = encoding;
            this.MaxCount = maxCount;
            this.MergeTags = mergeTags;
            // use default value if no "priority" provided
            if (priority == null)
            {
                this.Priority = PriorityEnum.NonUrgent;
            }
            else
            {
                this.Priority = priority;
            }
            this.CustomData = customData;
            // use default value if no "registered" provided
            if (registered == null)
            {
                this.Registered = false;
            }
            else
            {
                this.Registered = registered;
            }
            // use default value if no "group" provided
            if (group == null)
            {
                this.Group = "default";
            }
            else
            {
                this.Group = group;
            }
        }
        
        /// <summary>
        /// The contact of the recipient. format should be countryCode-phoneNumber.
        /// </summary>
        /// <value>The contact of the recipient. format should be countryCode-phoneNumber.</value>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }

        /// <summary>
        /// The id of the sender.
        /// </summary>
        /// <value>The id of the sender.</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public string From { get; set; }

        /// <summary>
        /// The content of the message.
        /// </summary>
        /// <value>The content of the message.</value>
        [DataMember(Name="textBody", EmitDefaultValue=false)]
        public string TextBody { get; set; }


        /// <summary>
        /// the maximum amount of messages to be sent (if the textBody is too big for a single message).
        /// </summary>
        /// <value>the maximum amount of messages to be sent (if the textBody is too big for a single message).</value>
        [DataMember(Name="maxCount", EmitDefaultValue=false)]
        public int? MaxCount { get; set; }

        /// <summary>
        /// A list of the merge tags to replace information gaps in the email. The format of each tag should be &#x60;&#x60;tagName:tagValue&#x60;&#x60;
        /// </summary>
        /// <value>A list of the merge tags to replace information gaps in the email. The format of each tag should be &#x60;&#x60;tagName:tagValue&#x60;&#x60;</value>
        [DataMember(Name="mergeTags", EmitDefaultValue=false)]
        public List<string> MergeTags { get; set; }


        /// <summary>
        /// Extra Data related to the campaign to be re-sent via WebHook.
        /// </summary>
        /// <value>Extra Data related to the campaign to be re-sent via WebHook.</value>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public string CustomData { get; set; }

        /// <summary>
        /// option to register the message. Its an exclusive feature for senders that require it.
        /// </summary>
        /// <value>option to register the message. Its an exclusive feature for senders that require it.</value>
        [DataMember(Name="registered", EmitDefaultValue=false)]
        public bool? Registered { get; set; }

        /// <summary>
        /// The group of the message.
        /// </summary>
        /// <value>The group of the message.</value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public string Group { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManualSMS {\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  TextBody: ").Append(TextBody).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  MaxCount: ").Append(MaxCount).Append("\n");
            sb.Append("  MergeTags: ").Append(MergeTags).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("  Registered: ").Append(Registered).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ManualSMS);
        }

        /// <summary>
        /// Returns true if ManualSMS instances are equal
        /// </summary>
        /// <param name="input">Instance of ManualSMS to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManualSMS input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.To == input.To ||
                    (this.To != null &&
                    this.To.Equals(input.To))
                ) && 
                (
                    this.From == input.From ||
                    (this.From != null &&
                    this.From.Equals(input.From))
                ) && 
                (
                    this.TextBody == input.TextBody ||
                    (this.TextBody != null &&
                    this.TextBody.Equals(input.TextBody))
                ) && 
                (
                    this.Encoding == input.Encoding ||
                    (this.Encoding != null &&
                    this.Encoding.Equals(input.Encoding))
                ) && 
                (
                    this.MaxCount == input.MaxCount ||
                    (this.MaxCount != null &&
                    this.MaxCount.Equals(input.MaxCount))
                ) && 
                (
                    this.MergeTags == input.MergeTags ||
                    this.MergeTags != null &&
                    input.MergeTags != null &&
                    this.MergeTags.SequenceEqual(input.MergeTags)
                ) && 
                (
                    this.Priority == input.Priority ||
                    (this.Priority != null &&
                    this.Priority.Equals(input.Priority))
                ) && 
                (
                    this.CustomData == input.CustomData ||
                    (this.CustomData != null &&
                    this.CustomData.Equals(input.CustomData))
                ) && 
                (
                    this.Registered == input.Registered ||
                    (this.Registered != null &&
                    this.Registered.Equals(input.Registered))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.To != null)
                    hashCode = hashCode * 59 + this.To.GetHashCode();
                if (this.From != null)
                    hashCode = hashCode * 59 + this.From.GetHashCode();
                if (this.TextBody != null)
                    hashCode = hashCode * 59 + this.TextBody.GetHashCode();
                if (this.Encoding != null)
                    hashCode = hashCode * 59 + this.Encoding.GetHashCode();
                if (this.MaxCount != null)
                    hashCode = hashCode * 59 + this.MaxCount.GetHashCode();
                if (this.MergeTags != null)
                    hashCode = hashCode * 59 + this.MergeTags.GetHashCode();
                if (this.Priority != null)
                    hashCode = hashCode * 59 + this.Priority.GetHashCode();
                if (this.CustomData != null)
                    hashCode = hashCode * 59 + this.CustomData.GetHashCode();
                if (this.Registered != null)
                    hashCode = hashCode * 59 + this.Registered.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
