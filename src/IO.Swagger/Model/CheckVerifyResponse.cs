/* 
 * Transactional API
 *
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// CheckVerifyResponse
    /// </summary>
    [DataContract]
        public partial class CheckVerifyResponse :  IEquatable<CheckVerifyResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CheckVerifyResponse" /> class.
        /// </summary>
        /// <param name="id">The id of the request..</param>
        /// <param name="messageId">The id of the message..</param>
        /// <param name="senderId">The id of the sender..</param>
        /// <param name="recipientNumber">The phone number of the recipient..</param>
        /// <param name="code">The code sent to the phone number..</param>
        /// <param name="codeTTL">The time in seconds the code was valid..</param>
        /// <param name="status">The statues of the verify request..</param>
        /// <param name="createDate">The date the verify was requested..</param>
        /// <param name="message">the message sent to the recipient..</param>
        public CheckVerifyResponse(string id = default(string), string messageId = default(string), string senderId = default(string), string recipientNumber = default(string), string code = default(string), int? codeTTL = default(int?), string status = default(string), string createDate = default(string), string message = default(string))
        {
            this.Id = id;
            this.MessageId = messageId;
            this.SenderId = senderId;
            this.RecipientNumber = recipientNumber;
            this.Code = code;
            this.CodeTTL = codeTTL;
            this.Status = status;
            this.CreateDate = createDate;
            this.Message = message;
        }
        
        /// <summary>
        /// The id of the request.
        /// </summary>
        /// <value>The id of the request.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The id of the message.
        /// </summary>
        /// <value>The id of the message.</value>
        [DataMember(Name="messageId", EmitDefaultValue=false)]
        public string MessageId { get; set; }

        /// <summary>
        /// The id of the sender.
        /// </summary>
        /// <value>The id of the sender.</value>
        [DataMember(Name="senderId", EmitDefaultValue=false)]
        public string SenderId { get; set; }

        /// <summary>
        /// The phone number of the recipient.
        /// </summary>
        /// <value>The phone number of the recipient.</value>
        [DataMember(Name="recipientNumber", EmitDefaultValue=false)]
        public string RecipientNumber { get; set; }

        /// <summary>
        /// The code sent to the phone number.
        /// </summary>
        /// <value>The code sent to the phone number.</value>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// The time in seconds the code was valid.
        /// </summary>
        /// <value>The time in seconds the code was valid.</value>
        [DataMember(Name="codeTTL", EmitDefaultValue=false)]
        public int? CodeTTL { get; set; }

        /// <summary>
        /// The statues of the verify request.
        /// </summary>
        /// <value>The statues of the verify request.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// The date the verify was requested.
        /// </summary>
        /// <value>The date the verify was requested.</value>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public string CreateDate { get; set; }

        /// <summary>
        /// the message sent to the recipient.
        /// </summary>
        /// <value>the message sent to the recipient.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CheckVerifyResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  SenderId: ").Append(SenderId).Append("\n");
            sb.Append("  RecipientNumber: ").Append(RecipientNumber).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  CodeTTL: ").Append(CodeTTL).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CheckVerifyResponse);
        }

        /// <summary>
        /// Returns true if CheckVerifyResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CheckVerifyResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CheckVerifyResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.MessageId == input.MessageId ||
                    (this.MessageId != null &&
                    this.MessageId.Equals(input.MessageId))
                ) && 
                (
                    this.SenderId == input.SenderId ||
                    (this.SenderId != null &&
                    this.SenderId.Equals(input.SenderId))
                ) && 
                (
                    this.RecipientNumber == input.RecipientNumber ||
                    (this.RecipientNumber != null &&
                    this.RecipientNumber.Equals(input.RecipientNumber))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.CodeTTL == input.CodeTTL ||
                    (this.CodeTTL != null &&
                    this.CodeTTL.Equals(input.CodeTTL))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.MessageId != null)
                    hashCode = hashCode * 59 + this.MessageId.GetHashCode();
                if (this.SenderId != null)
                    hashCode = hashCode * 59 + this.SenderId.GetHashCode();
                if (this.RecipientNumber != null)
                    hashCode = hashCode * 59 + this.RecipientNumber.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.CodeTTL != null)
                    hashCode = hashCode * 59 + this.CodeTTL.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
