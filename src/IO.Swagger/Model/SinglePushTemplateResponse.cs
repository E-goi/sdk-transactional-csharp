/* 
 * Transactional API
 *
 * # Introduction    This API is a service provided by [E-goi](www.e-goi.com) to send transactional messages.    Transactional Messaging is a 1-to-1 communication channel, usually from an organization directed to a specific consumer.   They can be triggered by:    * __Actions__ - The consumer interacts with the organization (ie.: online shopping);  * __Time__ - The consumer's actions are time-bounded by the organization (ie.: period of inactivity).    Because of the nature of these messages,   it is expected that the consumer is interested in the content of these messages.   Therefore, they have a different treatment from marketing messages, and have a higher acceptance and opening rate.    >DISCLAIMER  >  >Please notice that this platform is more delicate in regards to the nature and processing of its messages.  >  >It should NOT be used as a mean of mass marketing, scams, phishing or overall unruly behaviour.   >  >Failure to comply may lead to limitation of use and even termination of account.    ***
 *
 * OpenAPI spec version: V2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// SinglePushTemplateResponse
    /// </summary>
    [DataContract]
        public partial class SinglePushTemplateResponse :  IEquatable<SinglePushTemplateResponse>, IValidatableObject
    {
        /// <summary>
        /// The id of the app to associate the template.
        /// </summary>
        /// <value>The id of the app to associate the template.</value>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum AppIdEnum
        {
            /// <summary>
            /// Enum Unicode for value: unicode
            /// </summary>
            [EnumMember(Value = "unicode")]
            Unicode = 1,
            /// <summary>
            /// Enum Gsm0338 for value: gsm0338
            /// </summary>
            [EnumMember(Value = "gsm0338")]
            Gsm0338 = 2        }
        /// <summary>
        /// The id of the app to associate the template.
        /// </summary>
        /// <value>The id of the app to associate the template.</value>
        [DataMember(Name="appId", EmitDefaultValue=false)]
        public AppIdEnum? AppId { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SinglePushTemplateResponse" /> class.
        /// </summary>
        /// <param name="id">The id of the template. (required).</param>
        /// <param name="subject">The title of the message. (required).</param>
        /// <param name="textBody">The text body of the message. (required).</param>
        /// <param name="appId">The id of the app to associate the template. (default to AppIdEnum.Unicode).</param>
        /// <param name="customData">Any data to associate to the message. (default to &quot;1&quot;).</param>
        /// <param name="templateName">The name of the template. (required).</param>
        public SinglePushTemplateResponse(string id = default(string), string subject = default(string), string textBody = default(string), AppIdEnum? appId = AppIdEnum.Unicode, string customData = "1", string templateName = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for SinglePushTemplateResponse and cannot be null");
            }
            else
            {
                this.Id = id;
            }
            // to ensure "subject" is required (not null)
            if (subject == null)
            {
                throw new InvalidDataException("subject is a required property for SinglePushTemplateResponse and cannot be null");
            }
            else
            {
                this.Subject = subject;
            }
            // to ensure "textBody" is required (not null)
            if (textBody == null)
            {
                throw new InvalidDataException("textBody is a required property for SinglePushTemplateResponse and cannot be null");
            }
            else
            {
                this.TextBody = textBody;
            }
            // to ensure "templateName" is required (not null)
            if (templateName == null)
            {
                throw new InvalidDataException("templateName is a required property for SinglePushTemplateResponse and cannot be null");
            }
            else
            {
                this.TemplateName = templateName;
            }
            // use default value if no "appId" provided
            if (appId == null)
            {
                this.AppId = AppIdEnum.Unicode;
            }
            else
            {
                this.AppId = appId;
            }
            // use default value if no "customData" provided
            if (customData == null)
            {
                this.CustomData = "1";
            }
            else
            {
                this.CustomData = customData;
            }
        }
        
        /// <summary>
        /// The id of the template.
        /// </summary>
        /// <value>The id of the template.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The title of the message.
        /// </summary>
        /// <value>The title of the message.</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// The text body of the message.
        /// </summary>
        /// <value>The text body of the message.</value>
        [DataMember(Name="textBody", EmitDefaultValue=false)]
        public string TextBody { get; set; }


        /// <summary>
        /// Any data to associate to the message.
        /// </summary>
        /// <value>Any data to associate to the message.</value>
        [DataMember(Name="customData", EmitDefaultValue=false)]
        public string CustomData { get; set; }

        /// <summary>
        /// The name of the template.
        /// </summary>
        /// <value>The name of the template.</value>
        [DataMember(Name="templateName", EmitDefaultValue=false)]
        public string TemplateName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SinglePushTemplateResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  TextBody: ").Append(TextBody).Append("\n");
            sb.Append("  AppId: ").Append(AppId).Append("\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("  TemplateName: ").Append(TemplateName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SinglePushTemplateResponse);
        }

        /// <summary>
        /// Returns true if SinglePushTemplateResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of SinglePushTemplateResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SinglePushTemplateResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.TextBody == input.TextBody ||
                    (this.TextBody != null &&
                    this.TextBody.Equals(input.TextBody))
                ) && 
                (
                    this.AppId == input.AppId ||
                    (this.AppId != null &&
                    this.AppId.Equals(input.AppId))
                ) && 
                (
                    this.CustomData == input.CustomData ||
                    (this.CustomData != null &&
                    this.CustomData.Equals(input.CustomData))
                ) && 
                (
                    this.TemplateName == input.TemplateName ||
                    (this.TemplateName != null &&
                    this.TemplateName.Equals(input.TemplateName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.TextBody != null)
                    hashCode = hashCode * 59 + this.TextBody.GetHashCode();
                if (this.AppId != null)
                    hashCode = hashCode * 59 + this.AppId.GetHashCode();
                if (this.CustomData != null)
                    hashCode = hashCode * 59 + this.CustomData.GetHashCode();
                if (this.TemplateName != null)
                    hashCode = hashCode * 59 + this.TemplateName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
